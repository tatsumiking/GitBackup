#ifndef __LTDLGCTL_H__
#define __LTDLGCTL_H__

//  Microsoft Visual C++ によって自動生成された IDispatch ラップ クラス

// メモ: このファイルの内容を編集しないでください。 このクラスが再度
//  Microsoft Visual C++ で生成された場合、変更を上書きします。


// このインターフェイスによって参照されるディスパッチ インターフェイス。
class COleFont;

/////////////////////////////////////////////////////////////////////////////
// CLTDlgOCXCtl ラップ クラス

class CLTDlgOCXCtl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CLTDlgOCXCtl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x100060, 0xb1ba, 0x11ce, { 0xab, 0xc6, 0xf5, 0xb2, 0xe7, 0x9d, 0x9e, 0x3f } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// アトリビュート
public:

// オペレーション
public:
	// メソッド 'QueryInterface' は戻り値の型またはパラメータ型が無効なため表示できません。
	unsigned long AddRef();
	unsigned long Release();
	// メソッド 'GetTypeInfoCount' は戻り値の型またはパラメータ型が無効なため表示できません。
	// メソッド 'GetTypeInfo' は戻り値の型またはパラメータ型が無効なため表示できません。
	// メソッド 'GetIDsOfNames' は戻り値の型またはパラメータ型が無効なため表示できません。
	// メソッド 'Invoke' は戻り値の型またはパラメータ型が無効なため表示できません。
	void SetFont(LPDISPATCH newValue);
	COleFont GetFont();
	long GetAngle();
	void SetAngle(long nNewValue);
	short GetAngle(long hWnd);
	BOOL GetAngleFlag();
	void SetAngleFlag(BOOL bNewValue);
	long GetUIFlags();
	void SetUIFlags(long nNewValue);
	BOOL GetShowHelpButton();
	void SetShowHelpButton(BOOL bNewValue);
	short GetNewWidth();
	void SetNewWidth(short nNewValue);
	short GetNewHeight();
	void SetNewHeight(short nNewValue);
	short GetSize(long hWnd);
	long GetBitmap();
	void SetBitmap(long nNewValue);
	short GetBitsPerPixel();
	void SetBitsPerPixel(short nNewValue);
	short GetPaletteFlags();
	void SetPaletteFlags(short nNewValue);
	short GetDitherFlags();
	void SetDitherFlags(short nNewValue);
	short GetColorRes(long hWnd);
	long GetFileDlgFlags();
	void SetFileDlgFlags(long nNewValue);
	CString GetDialogTitle();
	void SetDialogTitle(LPCTSTR lpszNewValue);
	CString GetFileName();
	void SetFileName(LPCTSTR lpszNewValue);
	CString GetFileTitle();
	void SetFileTitle(LPCTSTR lpszNewValue);
	CString GetFilter();
	void SetFilter(LPCTSTR lpszNewValue);
	long GetFilterIndex();
	void SetFilterIndex(long nNewValue);
	CString GetInitialDir();
	void SetInitialDir(LPCTSTR lpszNewValue);
	long GetMaxFileSize();
	void SetMaxFileSize(long nNewValue);
	long GetPageNumber();
	void SetPageNumber(long nNewValue);
	long GetLoadPasses();
	void SetLoadPasses(long nNewValue);
	BOOL GetLoadCompressed();
	void SetLoadCompressed(BOOL bNewValue);
	BOOL GetLoadRotated();
	void SetLoadRotated(BOOL bNewValue);
	short FileOpen(long hWnd);
	long GetMaxFileTitleSize();
	void SetMaxFileTitleSize(long nNewValue);
	long GetThumbnail();
	void SetThumbnail(long nNewValue);
	short GetSaveBitsPerPixel();
	void SetSaveBitsPerPixel(short nNewValue);
	short GetSaveFormat();
	void SetSaveFormat(short nNewValue);
	short GetSaveQFactor();
	void SetSaveQFactor(short nNewValue);
	short GetSaveMulti();
	void SetSaveMulti(short nNewValue);
	BOOL GetSaveProgressive();
	void SetSaveProgressive(BOOL bNewValue);
	short GetSavePasses();
	void SetSavePasses(short nNewValue);
	BOOL GetSaveWithStamp();
	void SetSaveWithStamp(BOOL bNewValue);
	short GetSaveStampBits();
	void SetSaveStampBits(short nNewValue);
	short GetSaveStampWidth();
	void SetSaveStampWidth(short nNewValue);
	short GetSaveStampHeight();
	void SetSaveStampHeight(short nNewValue);
	BOOL GetSaveInterlaced();
	void SetSaveInterlaced(BOOL bNewValue);
	short FileSave(long hWnd);
	long GetSaveFormatFlags();
	void SetSaveFormatFlags(long nNewValue);
	short GetDirection();
	void SetDirection(short nNewValue);
	short GetDepth();
	void SetDepth(short nNewValue);
	short GetEmboss(long hWnd);
	short GetRange();
	void SetRange(short nNewValue);
	short GetChannel();
	void SetChannel(short nNewValue);
	short GetNoise(long hWnd);
	short GetGamma();
	void SetGamma(short nNewValue);
	short GetGamma(long hWnd);
	short GetLow();
	void SetLow(short nNewValue);
	short GetHigh();
	void SetHigh(short nNewValue);
	short GetRange(long hWnd);
	short GetChange();
	void SetChange(short nNewValue);
	long GetProcess();
	void SetProcess(long nNewValue);
	short GetChange(long hWnd);
	short GetSpatialFilterType();
	void SetSpatialFilterType(short nNewValue);
	short GetBinaryFilterType();
	void SetBinaryFilterType(short nNewValue);
	short GetFilter(long hWnd);
	short GetFilterType();
	void SetFilterType(short nNewValue);
	BOOL GetPreviewEnabled();
	void SetPreviewEnabled(BOOL bNewValue);
	BOOL GetEnableMethodErrors();
	void SetEnableMethodErrors(BOOL bNewValue);
	short GetLowBit();
	void SetLowBit(short nNewValue);
	short GetHighBit();
	void SetHighBit(short nNewValue);
	long GetLowLevel();
	void SetLowLevel(long nNewValue);
	long GetHighLevel();
	void SetHighLevel(long nNewValue);
	unsigned long GetStartColor();
	void SetStartColor(unsigned long newValue);
	unsigned long GetEndColor();
	void SetEndColor(unsigned long newValue);
	short GetWindowLevel(long hWnd);
	short GetEffect();
	void SetEffect(short nNewValue);
	short GetGrain();
	void SetGrain(short nNewValue);
	short GetDelay();
	void SetDelay(short nNewValue);
	short GetMaxPass();
	void SetMaxPass(short nNewValue);
	BOOL GetTransparent();
	void SetTransparent(BOOL bNewValue);
	unsigned long GetTransparentColor();
	void SetTransparentColor(unsigned long newValue);
	short GetWandWidth();
	void SetWandWidth(short nNewValue);
	unsigned long GetWandColor();
	void SetWandColor(unsigned long newValue);
	short GetEffect(long hWnd);
	short GetGradientStyle();
	void SetGradientStyle(short nNewValue);
	short GetGradientSteps();
	void SetGradientSteps(short nNewValue);
	short GetGradient(long hWnd);
	short GetTransition();
	void SetTransition(short nNewValue);
	short GetTransition(long hWnd);
	short GetShape();
	void SetShape(short nNewValue);
	short GetShapeBackStyle();
	void SetShapeBackStyle(short nNewValue);
	short GetShapeFillStyle();
	void SetShapeFillStyle(short nNewValue);
	unsigned long GetShapeBorderColor();
	void SetShapeBorderColor(unsigned long newValue);
	short GetShapeBorderStyle();
	void SetShapeBorderStyle(short nNewValue);
	short GetShapeBorderWidth();
	void SetShapeBorderWidth(short nNewValue);
	short GetShapeInnerStyle();
	void SetShapeInnerStyle(short nNewValue);
	short GetShapeInnerWidth();
	void SetShapeInnerWidth(short nNewValue);
	unsigned long GetShapeInnerHiliteColor();
	void SetShapeInnerHiliteColor(unsigned long newValue);
	unsigned long GetShapeInnerShadowColor();
	void SetShapeInnerShadowColor(unsigned long newValue);
	short GetShapeOuterStyle();
	void SetShapeOuterStyle(short nNewValue);
	short GetShapeOuterWidth();
	void SetShapeOuterWidth(short nNewValue);
	unsigned long GetShapeOuterHiliteColor();
	void SetShapeOuterHiliteColor(unsigned long newValue);
	unsigned long GetShapeOuterShadowColor();
	void SetShapeOuterShadowColor(unsigned long newValue);
	short GetShadowXDepth();
	void SetShadowXDepth(short nNewValue);
	short GetShadowYDepth();
	void SetShadowYDepth(short nNewValue);
	unsigned long GetShadowColor();
	void SetShadowColor(unsigned long newValue);
	short Get3dShape(long hWnd);
	long GetShapeBackgroundBitmap();
	void SetShapeBackgroundBitmap(long nNewValue);
	CString GetSampleText();
	void SetSampleText(LPCTSTR lpszNewValue);
	short GetTextStyle();
	void SetTextStyle(short nNewValue);
	short GetTextAlign();
	void SetTextAlign(short nNewValue);
	BOOL GetTextWordWrap();
	void SetTextWordWrap(BOOL bNewValue);
	unsigned long GetTextColor();
	void SetTextColor(unsigned long newValue);
	unsigned long GetTextHiliteColor();
	void SetTextHiliteColor(unsigned long newValue);
	BOOL GetTextUseForegroundImage();
	void SetTextUseForegroundImage(BOOL bNewValue);
	short Get3dText(long hWnd);
	long GetTextForegroundBitmap();
	void SetTextForegroundBitmap(long nNewValue);
	unsigned long GetForeColor();
	void SetForeColor(unsigned long newValue);
	unsigned long GetBackColor();
	void SetBackColor(unsigned long newValue);
	void UnlockSupport(short iType, LPCTSTR pszKey);
	long IsSupportLocked(short iType);
};

#endif // __LTDLGCTL_H__

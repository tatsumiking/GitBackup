// Microsoft Visual C++ で自動生成された IDispatch ラップ クラス

// メモ: このファイルの内容を編集しないでください。 このクラスが再度
//  Microsoft Visual C++ で生成された場合、変更を上書きします。

#include "stdafx.h"
#include "lead.h"

// このインターフェイスによって参照されるディスパッチ インターフェイス
#include "Font.h"
#include "Picture.h"

/////////////////////////////////////////////////////////////////////////////
// CLead

IMPLEMENT_DYNCREATE(CLead, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLead プロパティ

BOOL CLead::GetAutoSize()
{
	BOOL result;
	GetProperty(0xfffffe0c, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoSize(BOOL propVal)
{
	SetProperty(0xfffffe0c, VT_BOOL, propVal);
}

long CLead::GetReadyState()
{
	long result;
	GetProperty(DISPID_READYSTATE, VT_I4, (void*)&result);
	return result;
}

void CLead::SetReadyState(long propVal)
{
	SetProperty(DISPID_READYSTATE, VT_I4, propVal);
}

short CLead::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CLead::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

OLE_HANDLE CLead::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CLead::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

COleFont CLead::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CLead::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CLead::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

short CLead::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

OLE_COLOR CLead::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CLead::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

long CLead::GetBitmap()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CLead::SetBitmap(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

BOOL CLead::GetAutoRepaint()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoRepaint(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

short CLead::GetPaintEffect()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintEffect(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

BOOL CLead::GetBackErase()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetBackErase(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CLead::GetAutoScroll()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoScroll(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

short CLead::GetPaintDither()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintDither(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

BOOL CLead::GetEnableProgressEvent()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetEnableProgressEvent(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

short CLead::GetBitonalScaling()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitonalScaling(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

BOOL CLead::GetPaintWhileLoad()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetPaintWhileLoad(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

float CLead::GetBitmapWidth()
{
	float result;
	GetProperty(0xa, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBitmapWidth(float propVal)
{
	SetProperty(0xa, VT_R4, propVal);
}

float CLead::GetBitmapHeight()
{
	float result;
	GetProperty(0xb, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBitmapHeight(float propVal)
{
	SetProperty(0xb, VT_R4, propVal);
}

short CLead::GetBitmapBits()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapBits(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CLead::GetVersionLevel()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CLead::SetVersionLevel(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

short CLead::GetVersionMajor()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CLead::SetVersionMajor(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

short CLead::GetVersionMinor()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CLead::SetVersionMinor(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

CString CLead::GetVersionProduct()
{
	CString result;
	GetProperty(0x10, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetVersionProduct(LPCTSTR propVal)
{
	SetProperty(0x10, VT_BSTR, propVal);
}

CString CLead::GetVersionDate()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetVersionDate(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

CString CLead::GetVersionTime()
{
	CString result;
	GetProperty(0x12, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetVersionTime(LPCTSTR propVal)
{
	SetProperty(0x12, VT_BSTR, propVal);
}

short CLead::GetPaintPalette()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintPalette(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

BOOL CLead::GetEnableMethodErrors()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetEnableMethodErrors(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

float CLead::GetDstLeft()
{
	float result;
	GetProperty(0x15, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstLeft(float propVal)
{
	SetProperty(0x15, VT_R4, propVal);
}

float CLead::GetDstTop()
{
	float result;
	GetProperty(0x16, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstTop(float propVal)
{
	SetProperty(0x16, VT_R4, propVal);
}

float CLead::GetDstWidth()
{
	float result;
	GetProperty(0x17, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstWidth(float propVal)
{
	SetProperty(0x17, VT_R4, propVal);
}

float CLead::GetDstHeight()
{
	float result;
	GetProperty(0x18, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstHeight(float propVal)
{
	SetProperty(0x18, VT_R4, propVal);
}

float CLead::GetDstClipLeft()
{
	float result;
	GetProperty(0x19, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstClipLeft(float propVal)
{
	SetProperty(0x19, VT_R4, propVal);
}

float CLead::GetDstClipTop()
{
	float result;
	GetProperty(0x1a, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstClipTop(float propVal)
{
	SetProperty(0x1a, VT_R4, propVal);
}

float CLead::GetDstClipWidth()
{
	float result;
	GetProperty(0x1b, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstClipWidth(float propVal)
{
	SetProperty(0x1b, VT_R4, propVal);
}

float CLead::GetDstClipHeight()
{
	float result;
	GetProperty(0x1c, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstClipHeight(float propVal)
{
	SetProperty(0x1c, VT_R4, propVal);
}

float CLead::GetSrcLeft()
{
	float result;
	GetProperty(0x1d, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcLeft(float propVal)
{
	SetProperty(0x1d, VT_R4, propVal);
}

float CLead::GetSrcTop()
{
	float result;
	GetProperty(0x1e, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcTop(float propVal)
{
	SetProperty(0x1e, VT_R4, propVal);
}

float CLead::GetSrcWidth()
{
	float result;
	GetProperty(0x1f, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcWidth(float propVal)
{
	SetProperty(0x1f, VT_R4, propVal);
}

float CLead::GetSrcHeight()
{
	float result;
	GetProperty(0x20, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcHeight(float propVal)
{
	SetProperty(0x20, VT_R4, propVal);
}

float CLead::GetSrcClipLeft()
{
	float result;
	GetProperty(0x21, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcClipLeft(float propVal)
{
	SetProperty(0x21, VT_R4, propVal);
}

float CLead::GetSrcClipTop()
{
	float result;
	GetProperty(0x22, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcClipTop(float propVal)
{
	SetProperty(0x22, VT_R4, propVal);
}

float CLead::GetSrcClipWidth()
{
	float result;
	GetProperty(0x23, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcClipWidth(float propVal)
{
	SetProperty(0x23, VT_R4, propVal);
}

float CLead::GetSrcClipHeight()
{
	float result;
	GetProperty(0x24, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcClipHeight(float propVal)
{
	SetProperty(0x24, VT_R4, propVal);
}

short CLead::GetBitmapXRes()
{
	short result;
	GetProperty(0x25, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapXRes(short propVal)
{
	SetProperty(0x25, VT_I2, propVal);
}

short CLead::GetBitmapYRes()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapYRes(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}

short CLead::GetInfoPage()
{
	short result;
	GetProperty(0x27, VT_I2, (void*)&result);
	return result;
}

void CLead::SetInfoPage(short propVal)
{
	SetProperty(0x27, VT_I2, propVal);
}

float CLead::GetInfoWidth()
{
	float result;
	GetProperty(0x28, VT_R4, (void*)&result);
	return result;
}

void CLead::SetInfoWidth(float propVal)
{
	SetProperty(0x28, VT_R4, propVal);
}

float CLead::GetInfoHeight()
{
	float result;
	GetProperty(0x29, VT_R4, (void*)&result);
	return result;
}

void CLead::SetInfoHeight(float propVal)
{
	SetProperty(0x29, VT_R4, propVal);
}

short CLead::GetInfoBits()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CLead::SetInfoBits(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

short CLead::GetInfoFormat()
{
	short result;
	GetProperty(0x2b, VT_I2, (void*)&result);
	return result;
}

void CLead::SetInfoFormat(short propVal)
{
	SetProperty(0x2b, VT_I2, propVal);
}

long CLead::GetInfoSizeDisk()
{
	long result;
	GetProperty(0x2c, VT_I4, (void*)&result);
	return result;
}

void CLead::SetInfoSizeDisk(long propVal)
{
	SetProperty(0x2c, VT_I4, propVal);
}

long CLead::GetInfoSizeMem()
{
	long result;
	GetProperty(0x2d, VT_I4, (void*)&result);
	return result;
}

void CLead::SetInfoSizeMem(long propVal)
{
	SetProperty(0x2d, VT_I4, propVal);
}

CString CLead::GetInfoCompress()
{
	CString result;
	GetProperty(0x2e, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetInfoCompress(LPCTSTR propVal)
{
	SetProperty(0x2e, VT_BSTR, propVal);
}

BOOL CLead::GetEnableTwainEvent()
{
	BOOL result;
	GetProperty(0x2f, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetEnableTwainEvent(BOOL propVal)
{
	SetProperty(0x2f, VT_BOOL, propVal);
}

BOOL CLead::GetRubberBandVisible()
{
	BOOL result;
	GetProperty(0x30, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetRubberBandVisible(BOOL propVal)
{
	SetProperty(0x30, VT_BOOL, propVal);
}

float CLead::GetRubberBandLeft()
{
	float result;
	GetProperty(0x31, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRubberBandLeft(float propVal)
{
	SetProperty(0x31, VT_R4, propVal);
}

float CLead::GetRubberBandTop()
{
	float result;
	GetProperty(0x32, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRubberBandTop(float propVal)
{
	SetProperty(0x32, VT_R4, propVal);
}

float CLead::GetRubberBandWidth()
{
	float result;
	GetProperty(0x33, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRubberBandWidth(float propVal)
{
	SetProperty(0x33, VT_R4, propVal);
}

float CLead::GetRubberBandHeight()
{
	float result;
	GetProperty(0x34, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRubberBandHeight(float propVal)
{
	SetProperty(0x34, VT_R4, propVal);
}

short CLead::GetPCDRes()
{
	short result;
	GetProperty(0x35, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPCDRes(short propVal)
{
	SetProperty(0x35, VT_I2, propVal);
}

short CLead::GetMousePointer()
{
	short result;
	GetProperty(0x36, VT_I2, (void*)&result);
	return result;
}

void CLead::SetMousePointer(short propVal)
{
	SetProperty(0x36, VT_I2, propVal);
}

CPicture CLead::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x37, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLead::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x37, VT_DISPATCH, propVal);
}

short CLead::GetScaleMode()
{
	short result;
	GetProperty(0x38, VT_I2, (void*)&result);
	return result;
}

void CLead::SetScaleMode(short propVal)
{
	SetProperty(0x38, VT_I2, propVal);
}

BOOL CLead::GetAutoSetRects()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoSetRects(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

float CLead::GetScaleLeft()
{
	float result;
	GetProperty(0x3a, VT_R4, (void*)&result);
	return result;
}

void CLead::SetScaleLeft(float propVal)
{
	SetProperty(0x3a, VT_R4, propVal);
}

float CLead::GetScaleTop()
{
	float result;
	GetProperty(0x3b, VT_R4, (void*)&result);
	return result;
}

void CLead::SetScaleTop(float propVal)
{
	SetProperty(0x3b, VT_R4, propVal);
}

float CLead::GetScaleWidth()
{
	float result;
	GetProperty(0x3c, VT_R4, (void*)&result);
	return result;
}

void CLead::SetScaleWidth(float propVal)
{
	SetProperty(0x3c, VT_R4, propVal);
}

float CLead::GetScaleHeight()
{
	float result;
	GetProperty(0x3d, VT_R4, (void*)&result);
	return result;
}

void CLead::SetScaleHeight(float propVal)
{
	SetProperty(0x3d, VT_R4, propVal);
}

BOOL CLead::GetDbCanAppend()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDbCanAppend(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

BOOL CLead::GetDbCanRestart()
{
	BOOL result;
	GetProperty(0x3f, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDbCanRestart(BOOL propVal)
{
	SetProperty(0x3f, VT_BOOL, propVal);
}

BOOL CLead::GetDbCanScroll()
{
	BOOL result;
	GetProperty(0x40, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDbCanScroll(BOOL propVal)
{
	SetProperty(0x40, VT_BOOL, propVal);
}

BOOL CLead::GetDbCanUpdate()
{
	BOOL result;
	GetProperty(0x41, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDbCanUpdate(BOOL propVal)
{
	SetProperty(0x41, VT_BOOL, propVal);
}

long CLead::GetDbRecordCount()
{
	long result;
	GetProperty(0x42, VT_I4, (void*)&result);
	return result;
}

void CLead::SetDbRecordCount(long propVal)
{
	SetProperty(0x42, VT_I4, propVal);
}

BOOL CLead::GetDbIsOpen()
{
	BOOL result;
	GetProperty(0x43, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDbIsOpen(BOOL propVal)
{
	SetProperty(0x43, VT_BOOL, propVal);
}

BOOL CLead::GetDbIsBOF()
{
	BOOL result;
	GetProperty(0x44, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDbIsBOF(BOOL propVal)
{
	SetProperty(0x44, VT_BOOL, propVal);
}

BOOL CLead::GetDbIsEOF()
{
	BOOL result;
	GetProperty(0x45, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDbIsEOF(BOOL propVal)
{
	SetProperty(0x45, VT_BOOL, propVal);
}

BOOL CLead::GetDbIsDeleted()
{
	BOOL result;
	GetProperty(0x46, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDbIsDeleted(BOOL propVal)
{
	SetProperty(0x46, VT_BOOL, propVal);
}

long CLead::GetDbCurrentRecord()
{
	long result;
	GetProperty(0x47, VT_I4, (void*)&result);
	return result;
}

void CLead::SetDbCurrentRecord(long propVal)
{
	SetProperty(0x47, VT_I4, propVal);
}

short CLead::GetDbEditMode()
{
	short result;
	GetProperty(0x48, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDbEditMode(short propVal)
{
	SetProperty(0x48, VT_I2, propVal);
}

short CLead::GetDbLockingMode()
{
	short result;
	GetProperty(0x49, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDbLockingMode(short propVal)
{
	SetProperty(0x49, VT_I2, propVal);
}

short CLead::GetDbLoadBits()
{
	short result;
	GetProperty(0x4a, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDbLoadBits(short propVal)
{
	SetProperty(0x4a, VT_I2, propVal);
}

BOOL CLead::GetForePalette()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetForePalette(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

CString CLead::GetTwainAppAuthor()
{
	CString result;
	GetProperty(0x4c, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetTwainAppAuthor(LPCTSTR propVal)
{
	SetProperty(0x4c, VT_BSTR, propVal);
}

CString CLead::GetTwainAppFamily()
{
	CString result;
	GetProperty(0x4d, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetTwainAppFamily(LPCTSTR propVal)
{
	SetProperty(0x4d, VT_BSTR, propVal);
}

CString CLead::GetTwainAppName()
{
	CString result;
	GetProperty(0x4e, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetTwainAppName(LPCTSTR propVal)
{
	SetProperty(0x4e, VT_BSTR, propVal);
}

CString CLead::GetTwainSourceName()
{
	CString result;
	GetProperty(0x4f, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetTwainSourceName(LPCTSTR propVal)
{
	SetProperty(0x4f, VT_BSTR, propVal);
}

short CLead::GetTwainMaxPages()
{
	short result;
	GetProperty(0x50, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTwainMaxPages(short propVal)
{
	SetProperty(0x50, VT_I2, propVal);
}

short CLead::GetTwainPixelType()
{
	short result;
	GetProperty(0x51, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTwainPixelType(short propVal)
{
	SetProperty(0x51, VT_I2, propVal);
}

short CLead::GetTwainRes()
{
	short result;
	GetProperty(0x52, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTwainRes(short propVal)
{
	SetProperty(0x52, VT_I2, propVal);
}

long CLead::GetTwainFrameLeft()
{
	long result;
	GetProperty(0x53, VT_I4, (void*)&result);
	return result;
}

void CLead::SetTwainFrameLeft(long propVal)
{
	SetProperty(0x53, VT_I4, propVal);
}

long CLead::GetTwainFrameTop()
{
	long result;
	GetProperty(0x54, VT_I4, (void*)&result);
	return result;
}

void CLead::SetTwainFrameTop(long propVal)
{
	SetProperty(0x54, VT_I4, propVal);
}

long CLead::GetTwainFrameWidth()
{
	long result;
	GetProperty(0x55, VT_I4, (void*)&result);
	return result;
}

void CLead::SetTwainFrameWidth(long propVal)
{
	SetProperty(0x55, VT_I4, propVal);
}

long CLead::GetTwainFrameHeight()
{
	long result;
	GetProperty(0x56, VT_I4, (void*)&result);
	return result;
}

void CLead::SetTwainFrameHeight(long propVal)
{
	SetProperty(0x56, VT_I4, propVal);
}

short CLead::GetTwainBits()
{
	short result;
	GetProperty(0x57, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTwainBits(short propVal)
{
	SetProperty(0x57, VT_I2, propVal);
}

short CLead::GetTwainSourceCount()
{
	short result;
	GetProperty(0x58, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTwainSourceCount(short propVal)
{
	SetProperty(0x58, VT_I2, propVal);
}

short CLead::GetTwainFlags()
{
	short result;
	GetProperty(0x59, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTwainFlags(short propVal)
{
	SetProperty(0x59, VT_I2, propVal);
}

LPUNKNOWN CLead::GetDataSource()
{
	LPUNKNOWN result;
	GetProperty(0x5a, VT_UNKNOWN, (void*)&result);
	return result;
}

void CLead::SetDataSource(LPUNKNOWN propVal)
{
	SetProperty(0x5a, VT_UNKNOWN, propVal);
}

CString CLead::GetDataField()
{
	CString result;
	GetProperty(0x5b, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetDataField(LPCTSTR propVal)
{
	SetProperty(0x5b, VT_BSTR, propVal);
}

short CLead::GetDataSaveBits()
{
	short result;
	GetProperty(0x5c, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDataSaveBits(short propVal)
{
	SetProperty(0x5c, VT_I2, propVal);
}

short CLead::GetDataSaveFormat()
{
	short result;
	GetProperty(0x5d, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDataSaveFormat(short propVal)
{
	SetProperty(0x5d, VT_I2, propVal);
}

short CLead::GetDataSaveQuality()
{
	short result;
	GetProperty(0x5e, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDataSaveQuality(short propVal)
{
	SetProperty(0x5e, VT_I2, propVal);
}

short CLead::GetDataLoadBits()
{
	short result;
	GetProperty(0x5f, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDataLoadBits(short propVal)
{
	SetProperty(0x5f, VT_I2, propVal);
}

BOOL CLead::GetDataChanged()
{
	BOOL result;
	GetProperty(0x60, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDataChanged(BOOL propVal)
{
	SetProperty(0x60, VT_BOOL, propVal);
}

long CLead::GetPaintROP3()
{
	long result;
	GetProperty(0x61, VT_I4, (void*)&result);
	return result;
}

void CLead::SetPaintROP3(long propVal)
{
	SetProperty(0x61, VT_I4, propVal);
}

short CLead::GetIsGrayscale()
{
	short result;
	GetProperty(0x62, VT_I2, (void*)&result);
	return result;
}

void CLead::SetIsGrayscale(short propVal)
{
	SetProperty(0x62, VT_I2, propVal);
}

BOOL CLead::GetHasRgn()
{
	BOOL result;
	GetProperty(0x63, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetHasRgn(BOOL propVal)
{
	SetProperty(0x63, VT_BOOL, propVal);
}

float CLead::GetRgnLeft()
{
	float result;
	GetProperty(0x64, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRgnLeft(float propVal)
{
	SetProperty(0x64, VT_R4, propVal);
}

float CLead::GetRgnTop()
{
	float result;
	GetProperty(0x65, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRgnTop(float propVal)
{
	SetProperty(0x65, VT_R4, propVal);
}

float CLead::GetRgnWidth()
{
	float result;
	GetProperty(0x66, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRgnWidth(float propVal)
{
	SetProperty(0x66, VT_R4, propVal);
}

float CLead::GetRgnHeight()
{
	float result;
	GetProperty(0x67, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRgnHeight(float propVal)
{
	SetProperty(0x67, VT_R4, propVal);
}

short CLead::GetRgnMarkingMode()
{
	short result;
	GetProperty(0x68, VT_I2, (void*)&result);
	return result;
}

void CLead::SetRgnMarkingMode(short propVal)
{
	SetProperty(0x68, VT_I2, propVal);
}

short CLead::GetRgnFrameType()
{
	short result;
	GetProperty(0x69, VT_I2, (void*)&result);
	return result;
}

void CLead::SetRgnFrameType(short propVal)
{
	SetProperty(0x69, VT_I2, propVal);
}

long CLead::GetFloater()
{
	long result;
	GetProperty(0x6a, VT_I4, (void*)&result);
	return result;
}

void CLead::SetFloater(long propVal)
{
	SetProperty(0x6a, VT_I4, propVal);
}

BOOL CLead::GetFloaterVisible()
{
	BOOL result;
	GetProperty(0x6b, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetFloaterVisible(BOOL propVal)
{
	SetProperty(0x6b, VT_BOOL, propVal);
}

float CLead::GetFloaterDstLeft()
{
	float result;
	GetProperty(0x6c, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterDstLeft(float propVal)
{
	SetProperty(0x6c, VT_R4, propVal);
}

float CLead::GetFloaterDstTop()
{
	float result;
	GetProperty(0x6d, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterDstTop(float propVal)
{
	SetProperty(0x6d, VT_R4, propVal);
}

float CLead::GetFloaterDstWidth()
{
	float result;
	GetProperty(0x6e, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterDstWidth(float propVal)
{
	SetProperty(0x6e, VT_R4, propVal);
}

float CLead::GetFloaterDstHeight()
{
	float result;
	GetProperty(0x6f, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterDstHeight(float propVal)
{
	SetProperty(0x6f, VT_R4, propVal);
}

float CLead::GetFloaterDstClipLeft()
{
	float result;
	GetProperty(0x70, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterDstClipLeft(float propVal)
{
	SetProperty(0x70, VT_R4, propVal);
}

float CLead::GetFloaterDstClipTop()
{
	float result;
	GetProperty(0x71, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterDstClipTop(float propVal)
{
	SetProperty(0x71, VT_R4, propVal);
}

float CLead::GetFloaterDstClipWidth()
{
	float result;
	GetProperty(0x72, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterDstClipWidth(float propVal)
{
	SetProperty(0x72, VT_R4, propVal);
}

float CLead::GetFloaterDstClipHeight()
{
	float result;
	GetProperty(0x73, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterDstClipHeight(float propVal)
{
	SetProperty(0x73, VT_R4, propVal);
}

float CLead::GetFloaterWidth()
{
	float result;
	GetProperty(0x74, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterWidth(float propVal)
{
	SetProperty(0x74, VT_R4, propVal);
}

float CLead::GetFloaterHeight()
{
	float result;
	GetProperty(0x75, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFloaterHeight(float propVal)
{
	SetProperty(0x75, VT_R4, propVal);
}

short CLead::GetPolygonSize()
{
	short result;
	GetProperty(0x76, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPolygonSize(short propVal)
{
	SetProperty(0x76, VT_I2, propVal);
}

short CLead::GetAnnUserMode()
{
	short result;
	GetProperty(0x77, VT_I2, (void*)&result);
	return result;
}

void CLead::SetAnnUserMode(short propVal)
{
	SetProperty(0x77, VT_I2, propVal);
}

short CLead::GetAnnTool()
{
	short result;
	GetProperty(0x78, VT_I2, (void*)&result);
	return result;
}

void CLead::SetAnnTool(short propVal)
{
	SetProperty(0x78, VT_I2, propVal);
}

BOOL CLead::GetAnnPasteReady()
{
	BOOL result;
	GetProperty(0x79, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAnnPasteReady(BOOL propVal)
{
	SetProperty(0x79, VT_BOOL, propVal);
}

long CLead::GetAnnContainer()
{
	long result;
	GetProperty(0x7a, VT_I4, (void*)&result);
	return result;
}

void CLead::SetAnnContainer(long propVal)
{
	SetProperty(0x7a, VT_I4, propVal);
}

short CLead::GetLoadInfoFormat()
{
	short result;
	GetProperty(0x7b, VT_I2, (void*)&result);
	return result;
}

void CLead::SetLoadInfoFormat(short propVal)
{
	SetProperty(0x7b, VT_I2, propVal);
}

float CLead::GetLoadInfoWidth()
{
	float result;
	GetProperty(0x7c, VT_R4, (void*)&result);
	return result;
}

void CLead::SetLoadInfoWidth(float propVal)
{
	SetProperty(0x7c, VT_R4, propVal);
}

float CLead::GetLoadInfoHeight()
{
	float result;
	GetProperty(0x7d, VT_R4, (void*)&result);
	return result;
}

void CLead::SetLoadInfoHeight(float propVal)
{
	SetProperty(0x7d, VT_R4, propVal);
}

short CLead::GetLoadInfoBits()
{
	short result;
	GetProperty(0x7e, VT_I2, (void*)&result);
	return result;
}

void CLead::SetLoadInfoBits(short propVal)
{
	SetProperty(0x7e, VT_I2, propVal);
}

short CLead::GetLoadInfoXRes()
{
	short result;
	GetProperty(0x7f, VT_I2, (void*)&result);
	return result;
}

void CLead::SetLoadInfoXRes(short propVal)
{
	SetProperty(0x7f, VT_I2, propVal);
}

short CLead::GetLoadInfoYRes()
{
	short result;
	GetProperty(0x80, VT_I2, (void*)&result);
	return result;
}

void CLead::SetLoadInfoYRes(short propVal)
{
	SetProperty(0x80, VT_I2, propVal);
}

long CLead::GetLoadInfoOffset()
{
	long result;
	GetProperty(0x81, VT_I4, (void*)&result);
	return result;
}

void CLead::SetLoadInfoOffset(long propVal)
{
	SetProperty(0x81, VT_I4, propVal);
}

long CLead::GetLoadInfoFlags()
{
	long result;
	GetProperty(0x82, VT_I4, (void*)&result);
	return result;
}

void CLead::SetLoadInfoFlags(long propVal)
{
	SetProperty(0x82, VT_I4, propVal);
}

long CLead::GetAnnAutomation()
{
	long result;
	GetProperty(0x83, VT_I4, (void*)&result);
	return result;
}

void CLead::SetAnnAutomation(long propVal)
{
	SetProperty(0x83, VT_I4, propVal);
}

short CLead::GetProgressivePasses()
{
	short result;
	GetProperty(0x84, VT_I2, (void*)&result);
	return result;
}

void CLead::SetProgressivePasses(short propVal)
{
	SetProperty(0x84, VT_I2, propVal);
}

short CLead::GetBitmapListIndex()
{
	short result;
	GetProperty(0x85, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapListIndex(short propVal)
{
	SetProperty(0x85, VT_I2, propVal);
}

short CLead::GetBitmapListCount()
{
	short result;
	GetProperty(0x86, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapListCount(short propVal)
{
	SetProperty(0x86, VT_I2, propVal);
}

BOOL CLead::GetAnimationEnable()
{
	BOOL result;
	GetProperty(0x87, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAnimationEnable(BOOL propVal)
{
	SetProperty(0x87, VT_BOOL, propVal);
}

float CLead::GetBitmapLeft()
{
	float result;
	GetProperty(0x88, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBitmapLeft(float propVal)
{
	SetProperty(0x88, VT_R4, propVal);
}

float CLead::GetBitmapTop()
{
	float result;
	GetProperty(0x89, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBitmapTop(float propVal)
{
	SetProperty(0x89, VT_R4, propVal);
}

long CLead::GetBitmapDelay()
{
	long result;
	GetProperty(0x8a, VT_I4, (void*)&result);
	return result;
}

void CLead::SetBitmapDelay(long propVal)
{
	SetProperty(0x8a, VT_I4, propVal);
}

float CLead::GetAnimationWidth()
{
	float result;
	GetProperty(0x8b, VT_R4, (void*)&result);
	return result;
}

void CLead::SetAnimationWidth(float propVal)
{
	SetProperty(0x8b, VT_R4, propVal);
}

float CLead::GetAnimationHeight()
{
	float result;
	GetProperty(0x8c, VT_R4, (void*)&result);
	return result;
}

void CLead::SetAnimationHeight(float propVal)
{
	SetProperty(0x8c, VT_R4, propVal);
}

unsigned long CLead::GetAnimationBackColor()
{
	unsigned long result;
	GetProperty(0x8d, VT_I4, (void*)&result);
	return result;
}

void CLead::SetAnimationBackColor(unsigned long propVal)
{
	SetProperty(0x8d, VT_I4, propVal);
}

short CLead::GetAnimationBitsPerPixel()
{
	short result;
	GetProperty(0x8e, VT_I2, (void*)&result);
	return result;
}

void CLead::SetAnimationBitsPerPixel(short propVal)
{
	SetProperty(0x8e, VT_I2, propVal);
}

BOOL CLead::GetBitmapEnableTransparency()
{
	BOOL result;
	GetProperty(0x8f, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetBitmapEnableTransparency(BOOL propVal)
{
	SetProperty(0x8f, VT_BOOL, propVal);
}

unsigned long CLead::GetBitmapTransparentColor()
{
	unsigned long result;
	GetProperty(0x90, VT_I4, (void*)&result);
	return result;
}

void CLead::SetBitmapTransparentColor(unsigned long propVal)
{
	SetProperty(0x90, VT_I4, propVal);
}

short CLead::GetBitmapDisposalMethod()
{
	short result;
	GetProperty(0x91, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapDisposalMethod(short propVal)
{
	SetProperty(0x91, VT_I2, propVal);
}

long CLead::GetBitmapList()
{
	long result;
	GetProperty(0x92, VT_I4, (void*)&result);
	return result;
}

void CLead::SetBitmapList(long propVal)
{
	SetProperty(0x92, VT_I4, propVal);
}

BOOL CLead::GetAnnAutoMenuEnable()
{
	BOOL result;
	GetProperty(0x93, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAnnAutoMenuEnable(BOOL propVal)
{
	SetProperty(0x93, VT_BOOL, propVal);
}

BOOL CLead::GetAutoAnimate()
{
	BOOL result;
	GetProperty(0x94, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoAnimate(BOOL propVal)
{
	SetProperty(0x94, VT_BOOL, propVal);
}

BOOL CLead::GetAnimationLoop()
{
	BOOL result;
	GetProperty(0x95, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAnimationLoop(BOOL propVal)
{
	SetProperty(0x95, VT_BOOL, propVal);
}

float CLead::GetInfoAnimationWidth()
{
	float result;
	GetProperty(0x96, VT_R4, (void*)&result);
	return result;
}

void CLead::SetInfoAnimationWidth(float propVal)
{
	SetProperty(0x96, VT_R4, propVal);
}

float CLead::GetInfoAnimationHeight()
{
	float result;
	GetProperty(0x97, VT_R4, (void*)&result);
	return result;
}

void CLead::SetInfoAnimationHeight(float propVal)
{
	SetProperty(0x97, VT_R4, propVal);
}

BOOL CLead::GetInfoAnimation()
{
	BOOL result;
	GetProperty(0x98, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetInfoAnimation(BOOL propVal)
{
	SetProperty(0x98, VT_BOOL, propVal);
}

CString CLead::GetBitmapDataPath()
{
	CString result;
	GetProperty(0x99, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetBitmapDataPath(LPCTSTR propVal)
{
	SetProperty(0x99, VT_BSTR, propVal);
}

short CLead::GetPaintSizeMode()
{
	short result;
	GetProperty(0x9a, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintSizeMode(short propVal)
{
	SetProperty(0x9a, VT_I2, propVal);
}

float CLead::GetPaintZoomFactor()
{
	float result;
	GetProperty(0x9b, VT_R4, (void*)&result);
	return result;
}

void CLead::SetPaintZoomFactor(float propVal)
{
	SetProperty(0x9b, VT_R4, propVal);
}

short CLead::GetAutoAnimationLoop()
{
	short result;
	GetProperty(0x9c, VT_I2, (void*)&result);
	return result;
}

void CLead::SetAutoAnimationLoop(short propVal)
{
	SetProperty(0x9c, VT_I2, propVal);
}

BOOL CLead::GetAnnAutoDrawEnable()
{
	BOOL result;
	GetProperty(0x9d, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAnnAutoDrawEnable(BOOL propVal)
{
	SetProperty(0x9d, VT_BOOL, propVal);
}

short CLead::GetDimensionCount()
{
	short result;
	GetProperty(0x9e, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDimensionCount(short propVal)
{
	SetProperty(0x9e, VT_I2, propVal);
}

BOOL CLead::GetOLEDropAllowed()
{
	BOOL result;
	GetProperty(0x9f, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetOLEDropAllowed(BOOL propVal)
{
	SetProperty(0x9f, VT_BOOL, propVal);
}

BOOL CLead::GetAutoRubberBand()
{
	BOOL result;
	GetProperty(0xa0, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoRubberBand(BOOL propVal)
{
	SetProperty(0xa0, VT_BOOL, propVal);
}

BOOL CLead::GetSaveInterlaced()
{
	BOOL result;
	GetProperty(0xa1, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetSaveInterlaced(BOOL propVal)
{
	SetProperty(0xa1, VT_BOOL, propVal);
}

BOOL CLead::GetPaintSizeUseDPI()
{
	BOOL result;
	GetProperty(0xa2, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetPaintSizeUseDPI(BOOL propVal)
{
	SetProperty(0xa2, VT_BOOL, propVal);
}

CString CLead::GetAnnDataPath()
{
	CString result;
	GetProperty(0xa3, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetAnnDataPath(LPCTSTR propVal)
{
	SetProperty(0xa3, VT_BSTR, propVal);
}

BOOL CLead::GetDrawPersistence()
{
	BOOL result;
	GetProperty(0xa4, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetDrawPersistence(BOOL propVal)
{
	SetProperty(0xa4, VT_BOOL, propVal);
}

short CLead::GetDrawMode()
{
	short result;
	GetProperty(0xa5, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDrawMode(short propVal)
{
	SetProperty(0xa5, VT_I2, propVal);
}

unsigned long CLead::GetDrawPenColor()
{
	unsigned long result;
	GetProperty(0xa6, VT_I4, (void*)&result);
	return result;
}

void CLead::SetDrawPenColor(unsigned long propVal)
{
	SetProperty(0xa6, VT_I4, propVal);
}

short CLead::GetDrawPenWidth()
{
	short result;
	GetProperty(0xa7, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDrawPenWidth(short propVal)
{
	SetProperty(0xa7, VT_I2, propVal);
}

short CLead::GetDrawPenStyle()
{
	short result;
	GetProperty(0xa8, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDrawPenStyle(short propVal)
{
	SetProperty(0xa8, VT_I2, propVal);
}

unsigned long CLead::GetDrawFillColor()
{
	unsigned long result;
	GetProperty(0xa9, VT_I4, (void*)&result);
	return result;
}

void CLead::SetDrawFillColor(unsigned long propVal)
{
	SetProperty(0xa9, VT_I4, propVal);
}

short CLead::GetDrawFillStyle()
{
	short result;
	GetProperty(0xaa, VT_I2, (void*)&result);
	return result;
}

void CLead::SetDrawFillStyle(short propVal)
{
	SetProperty(0xaa, VT_I2, propVal);
}

unsigned long CLead::GetDrawFontColor()
{
	unsigned long result;
	GetProperty(0xab, VT_I4, (void*)&result);
	return result;
}

void CLead::SetDrawFontColor(unsigned long propVal)
{
	SetProperty(0xab, VT_I4, propVal);
}

short CLead::GetPaintContrast()
{
	short result;
	GetProperty(0xac, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintContrast(short propVal)
{
	SetProperty(0xac, VT_I2, propVal);
}

short CLead::GetPaintGamma()
{
	short result;
	GetProperty(0xad, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintGamma(short propVal)
{
	SetProperty(0xad, VT_I2, propVal);
}

short CLead::GetPaintIntensity()
{
	short result;
	GetProperty(0xae, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintIntensity(short propVal)
{
	SetProperty(0xae, VT_I2, propVal);
}

BOOL CLead::GetLoadUseViewPerspective()
{
	BOOL result;
	GetProperty(0xaf, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetLoadUseViewPerspective(BOOL propVal)
{
	SetProperty(0xaf, VT_BOOL, propVal);
}

BOOL CLead::GetAnnAutoRotate()
{
	BOOL result;
	GetProperty(0xb0, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAnnAutoRotate(BOOL propVal)
{
	SetProperty(0xb0, VT_BOOL, propVal);
}

short CLead::GetTransitionStyle()
{
	short result;
	GetProperty(0xb1, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTransitionStyle(short propVal)
{
	SetProperty(0xb1, VT_I2, propVal);
}

short CLead::GetTransitionEffect()
{
	short result;
	GetProperty(0xb2, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTransitionEffect(short propVal)
{
	SetProperty(0xb2, VT_I2, propVal);
}

short CLead::GetGradientStyle()
{
	short result;
	GetProperty(0xb3, VT_I2, (void*)&result);
	return result;
}

void CLead::SetGradientStyle(short propVal)
{
	SetProperty(0xb3, VT_I2, propVal);
}

unsigned long CLead::GetGradientStartColor()
{
	unsigned long result;
	GetProperty(0xb4, VT_I4, (void*)&result);
	return result;
}

void CLead::SetGradientStartColor(unsigned long propVal)
{
	SetProperty(0xb4, VT_I4, propVal);
}

unsigned long CLead::GetGradientEndColor()
{
	unsigned long result;
	GetProperty(0xb5, VT_I4, (void*)&result);
	return result;
}

void CLead::SetGradientEndColor(unsigned long propVal)
{
	SetProperty(0xb5, VT_I4, propVal);
}

short CLead::GetGradientSteps()
{
	short result;
	GetProperty(0xb6, VT_I2, (void*)&result);
	return result;
}

void CLead::SetGradientSteps(short propVal)
{
	SetProperty(0xb6, VT_I2, propVal);
}

short CLead::GetPatternStyle()
{
	short result;
	GetProperty(0xb7, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPatternStyle(short propVal)
{
	SetProperty(0xb7, VT_I2, propVal);
}

unsigned long CLead::GetPatternForeColor()
{
	unsigned long result;
	GetProperty(0xb8, VT_I4, (void*)&result);
	return result;
}

void CLead::SetPatternForeColor(unsigned long propVal)
{
	SetProperty(0xb8, VT_I4, propVal);
}

unsigned long CLead::GetPatternBackColor()
{
	unsigned long result;
	GetProperty(0xb9, VT_I4, (void*)&result);
	return result;
}

void CLead::SetPatternBackColor(unsigned long propVal)
{
	SetProperty(0xb9, VT_I4, propVal);
}

short CLead::GetPaintPass()
{
	short result;
	GetProperty(0xba, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintPass(short propVal)
{
	SetProperty(0xba, VT_I2, propVal);
}

short CLead::GetPaintMaxPasses()
{
	short result;
	GetProperty(0xbb, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintMaxPasses(short propVal)
{
	SetProperty(0xbb, VT_I2, propVal);
}

short CLead::GetEffectGrain()
{
	short result;
	GetProperty(0xbc, VT_I2, (void*)&result);
	return result;
}

void CLead::SetEffectGrain(short propVal)
{
	SetProperty(0xbc, VT_I2, propVal);
}

short CLead::GetEffectDelay()
{
	short result;
	GetProperty(0xbd, VT_I2, (void*)&result);
	return result;
}

void CLead::SetEffectDelay(short propVal)
{
	SetProperty(0xbd, VT_I2, propVal);
}

short CLead::GetWandSize()
{
	short result;
	GetProperty(0xbe, VT_I2, (void*)&result);
	return result;
}

void CLead::SetWandSize(short propVal)
{
	SetProperty(0xbe, VT_I2, propVal);
}

unsigned long CLead::GetWandColor()
{
	unsigned long result;
	GetProperty(0xbf, VT_I4, (void*)&result);
	return result;
}

void CLead::SetWandColor(unsigned long propVal)
{
	SetProperty(0xbf, VT_I4, propVal);
}

BOOL CLead::GetUseTransparentColor()
{
	BOOL result;
	GetProperty(0xc0, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetUseTransparentColor(BOOL propVal)
{
	SetProperty(0xc0, VT_BOOL, propVal);
}

unsigned long CLead::GetTransparentColor()
{
	unsigned long result;
	GetProperty(0xc1, VT_I4, (void*)&result);
	return result;
}

void CLead::SetTransparentColor(unsigned long propVal)
{
	SetProperty(0xc1, VT_I4, propVal);
}

BOOL CLead::GetPaintRgnOnly()
{
	BOOL result;
	GetProperty(0xc2, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetPaintRgnOnly(BOOL propVal)
{
	SetProperty(0xc2, VT_BOOL, propVal);
}

float CLead::GetShapeLeft()
{
	float result;
	GetProperty(0xc4, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShapeLeft(float propVal)
{
	SetProperty(0xc4, VT_R4, propVal);
}

float CLead::GetShapeTop()
{
	float result;
	GetProperty(0xc3, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShapeTop(float propVal)
{
	SetProperty(0xc3, VT_R4, propVal);
}

float CLead::GetShapeWidth()
{
	float result;
	GetProperty(0xc5, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShapeWidth(float propVal)
{
	SetProperty(0xc5, VT_R4, propVal);
}

float CLead::GetShapeHeight()
{
	float result;
	GetProperty(0xc6, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShapeHeight(float propVal)
{
	SetProperty(0xc6, VT_R4, propVal);
}

float CLead::GetShapeBorderThickness()
{
	float result;
	GetProperty(0xc7, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShapeBorderThickness(float propVal)
{
	SetProperty(0xc7, VT_R4, propVal);
}

unsigned long CLead::GetShapeBorderColor()
{
	unsigned long result;
	GetProperty(0xc8, VT_I4, (void*)&result);
	return result;
}

void CLead::SetShapeBorderColor(unsigned long propVal)
{
	SetProperty(0xc8, VT_I4, propVal);
}

short CLead::GetShapeInnerBandStyle()
{
	short result;
	GetProperty(0xc9, VT_I2, (void*)&result);
	return result;
}

void CLead::SetShapeInnerBandStyle(short propVal)
{
	SetProperty(0xc9, VT_I2, propVal);
}

float CLead::GetShapeInnerBandThickness()
{
	float result;
	GetProperty(0xca, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShapeInnerBandThickness(float propVal)
{
	SetProperty(0xca, VT_R4, propVal);
}

unsigned long CLead::GetShapeInnerBandHiliteColor()
{
	unsigned long result;
	GetProperty(0xcb, VT_I4, (void*)&result);
	return result;
}

void CLead::SetShapeInnerBandHiliteColor(unsigned long propVal)
{
	SetProperty(0xcb, VT_I4, propVal);
}

unsigned long CLead::GetShapeInnerBandShadowColor()
{
	unsigned long result;
	GetProperty(0xcc, VT_I4, (void*)&result);
	return result;
}

void CLead::SetShapeInnerBandShadowColor(unsigned long propVal)
{
	SetProperty(0xcc, VT_I4, propVal);
}

short CLead::GetShapeOuterBandStyle()
{
	short result;
	GetProperty(0xdc, VT_I2, (void*)&result);
	return result;
}

void CLead::SetShapeOuterBandStyle(short propVal)
{
	SetProperty(0xdc, VT_I2, propVal);
}

float CLead::GetShapeOuterBandThickness()
{
	float result;
	GetProperty(0xdd, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShapeOuterBandThickness(float propVal)
{
	SetProperty(0xdd, VT_R4, propVal);
}

unsigned long CLead::GetShapeOuterBandHiliteColor()
{
	unsigned long result;
	GetProperty(0xde, VT_I4, (void*)&result);
	return result;
}

void CLead::SetShapeOuterBandHiliteColor(unsigned long propVal)
{
	SetProperty(0xde, VT_I4, propVal);
}

unsigned long CLead::GetShapeOuterBandShadowColor()
{
	unsigned long result;
	GetProperty(0xdf, VT_I4, (void*)&result);
	return result;
}

void CLead::SetShapeOuterBandShadowColor(unsigned long propVal)
{
	SetProperty(0xdf, VT_I4, propVal);
}

short CLead::GetShapeBackgroundStyle()
{
	short result;
	GetProperty(0xcd, VT_I2, (void*)&result);
	return result;
}

void CLead::SetShapeBackgroundStyle(short propVal)
{
	SetProperty(0xcd, VT_I2, propVal);
}

float CLead::GetBackgroundImageLeft()
{
	float result;
	GetProperty(0xcf, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBackgroundImageLeft(float propVal)
{
	SetProperty(0xcf, VT_R4, propVal);
}

float CLead::GetBackgroundImageTop()
{
	float result;
	GetProperty(0xce, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBackgroundImageTop(float propVal)
{
	SetProperty(0xce, VT_R4, propVal);
}

float CLead::GetBackgroundImageWidth()
{
	float result;
	GetProperty(0xd0, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBackgroundImageWidth(float propVal)
{
	SetProperty(0xd0, VT_R4, propVal);
}

float CLead::GetBackgroundImageHeight()
{
	float result;
	GetProperty(0xd1, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBackgroundImageHeight(float propVal)
{
	SetProperty(0xd1, VT_R4, propVal);
}

float CLead::GetShadowXDepth()
{
	float result;
	GetProperty(0xd2, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShadowXDepth(float propVal)
{
	SetProperty(0xd2, VT_R4, propVal);
}

float CLead::GetShadowYDepth()
{
	float result;
	GetProperty(0xd3, VT_R4, (void*)&result);
	return result;
}

void CLead::SetShadowYDepth(float propVal)
{
	SetProperty(0xd3, VT_R4, propVal);
}

unsigned long CLead::GetShadowColor()
{
	unsigned long result;
	GetProperty(0xd4, VT_I4, (void*)&result);
	return result;
}

void CLead::SetShadowColor(unsigned long propVal)
{
	SetProperty(0xd4, VT_I4, propVal);
}

unsigned long CLead::GetTextHiliteColor()
{
	unsigned long result;
	GetProperty(0xd5, VT_I4, (void*)&result);
	return result;
}

void CLead::SetTextHiliteColor(unsigned long propVal)
{
	SetProperty(0xd5, VT_I4, propVal);
}

float CLead::GetTextLeft()
{
	float result;
	GetProperty(0xd6, VT_R4, (void*)&result);
	return result;
}

void CLead::SetTextLeft(float propVal)
{
	SetProperty(0xd6, VT_R4, propVal);
}

float CLead::GetTextTop()
{
	float result;
	GetProperty(0xd7, VT_R4, (void*)&result);
	return result;
}

void CLead::SetTextTop(float propVal)
{
	SetProperty(0xd7, VT_R4, propVal);
}

float CLead::GetTextWidth()
{
	float result;
	GetProperty(0xd8, VT_R4, (void*)&result);
	return result;
}

void CLead::SetTextWidth(float propVal)
{
	SetProperty(0xd8, VT_R4, propVal);
}

float CLead::GetTextHeight()
{
	float result;
	GetProperty(0xd9, VT_R4, (void*)&result);
	return result;
}

void CLead::SetTextHeight(float propVal)
{
	SetProperty(0xd9, VT_R4, propVal);
}

short CLead::GetTextAngle()
{
	short result;
	GetProperty(0xda, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTextAngle(short propVal)
{
	SetProperty(0xda, VT_I2, propVal);
}

short CLead::GetTextStyle()
{
	short result;
	GetProperty(0xdb, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTextStyle(short propVal)
{
	SetProperty(0xdb, VT_I2, propVal);
}

short CLead::GetShapeBorderStyle()
{
	short result;
	GetProperty(0xe0, VT_I2, (void*)&result);
	return result;
}

void CLead::SetShapeBorderStyle(short propVal)
{
	SetProperty(0xe0, VT_I2, propVal);
}

float CLead::GetFrameThickness()
{
	float result;
	GetProperty(0xe1, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFrameThickness(float propVal)
{
	SetProperty(0xe1, VT_R4, propVal);
}

unsigned long CLead::GetFrameColor()
{
	unsigned long result;
	GetProperty(0xe2, VT_I4, (void*)&result);
	return result;
}

void CLead::SetFrameColor(unsigned long propVal)
{
	SetProperty(0xe2, VT_I4, propVal);
}

short CLead::GetFrameInnerStyle()
{
	short result;
	GetProperty(0xe3, VT_I2, (void*)&result);
	return result;
}

void CLead::SetFrameInnerStyle(short propVal)
{
	SetProperty(0xe3, VT_I2, propVal);
}

float CLead::GetFrameInnerThickness()
{
	float result;
	GetProperty(0xe4, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFrameInnerThickness(float propVal)
{
	SetProperty(0xe4, VT_R4, propVal);
}

unsigned long CLead::GetFrameInnerHiliteColor()
{
	unsigned long result;
	GetProperty(0xe5, VT_I4, (void*)&result);
	return result;
}

void CLead::SetFrameInnerHiliteColor(unsigned long propVal)
{
	SetProperty(0xe5, VT_I4, propVal);
}

unsigned long CLead::GetFrameInnerShadowColor()
{
	unsigned long result;
	GetProperty(0xe6, VT_I4, (void*)&result);
	return result;
}

void CLead::SetFrameInnerShadowColor(unsigned long propVal)
{
	SetProperty(0xe6, VT_I4, propVal);
}

short CLead::GetFrameOuterStyle()
{
	short result;
	GetProperty(0xe7, VT_I2, (void*)&result);
	return result;
}

void CLead::SetFrameOuterStyle(short propVal)
{
	SetProperty(0xe7, VT_I2, propVal);
}

float CLead::GetFrameOuterThickness()
{
	float result;
	GetProperty(0xe8, VT_R4, (void*)&result);
	return result;
}

void CLead::SetFrameOuterThickness(float propVal)
{
	SetProperty(0xe8, VT_R4, propVal);
}

unsigned long CLead::GetFrameOuterHiliteColor()
{
	unsigned long result;
	GetProperty(0xe9, VT_I4, (void*)&result);
	return result;
}

void CLead::SetFrameOuterHiliteColor(unsigned long propVal)
{
	SetProperty(0xe9, VT_I4, propVal);
}

unsigned long CLead::GetFrameOuterShadowColor()
{
	unsigned long result;
	GetProperty(0xea, VT_I4, (void*)&result);
	return result;
}

void CLead::SetFrameOuterShadowColor(unsigned long propVal)
{
	SetProperty(0xea, VT_I4, propVal);
}

short CLead::GetTextAlign()
{
	short result;
	GetProperty(0xeb, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTextAlign(short propVal)
{
	SetProperty(0xeb, VT_I2, propVal);
}

BOOL CLead::GetTextWordWrap()
{
	BOOL result;
	GetProperty(0xec, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetTextWordWrap(BOOL propVal)
{
	SetProperty(0xec, VT_BOOL, propVal);
}

long CLead::GetBitmapAlpha()
{
	long result;
	GetProperty(0xed, VT_I4, (void*)&result);
	return result;
}

void CLead::SetBitmapAlpha(long propVal)
{
	SetProperty(0xed, VT_I4, propVal);
}

short CLead::GetPaintNotificationDelay()
{
	short result;
	GetProperty(0xee, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintNotificationDelay(short propVal)
{
	SetProperty(0xee, VT_I2, propVal);
}

BOOL CLead::GetTransparent()
{
	BOOL result;
	GetProperty(0xef, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetTransparent(BOOL propVal)
{
	SetProperty(0xef, VT_BOOL, propVal);
}

short CLead::GetLevelLowBit()
{
	short result;
	GetProperty(0xf0, VT_I2, (void*)&result);
	return result;
}

void CLead::SetLevelLowBit(short propVal)
{
	SetProperty(0xf0, VT_I2, propVal);
}

short CLead::GetLevelHighBit()
{
	short result;
	GetProperty(0xf1, VT_I2, (void*)&result);
	return result;
}

void CLead::SetLevelHighBit(short propVal)
{
	SetProperty(0xf1, VT_I2, propVal);
}

long CLead::GetLevelLUTLength()
{
	long result;
	GetProperty(0xf2, VT_I4, (void*)&result);
	return result;
}

void CLead::SetLevelLUTLength(long propVal)
{
	SetProperty(0xf2, VT_I4, propVal);
}

long CLead::GetMinVal()
{
	long result;
	GetProperty(0xf3, VT_I4, (void*)&result);
	return result;
}

void CLead::SetMinVal(long propVal)
{
	SetProperty(0xf3, VT_I4, propVal);
}

long CLead::GetMaxVal()
{
	long result;
	GetProperty(0xf4, VT_I4, (void*)&result);
	return result;
}

void CLead::SetMaxVal(long propVal)
{
	SetProperty(0xf4, VT_I4, propVal);
}

short CLead::GetMinBit()
{
	short result;
	GetProperty(0xf5, VT_I2, (void*)&result);
	return result;
}

void CLead::SetMinBit(short propVal)
{
	SetProperty(0xf5, VT_I2, propVal);
}

short CLead::GetMaxBit()
{
	short result;
	GetProperty(0xf6, VT_I2, (void*)&result);
	return result;
}

void CLead::SetMaxBit(short propVal)
{
	SetProperty(0xf6, VT_I2, propVal);
}

BOOL CLead::GetAnnShowLockedIcon()
{
	BOOL result;
	GetProperty(0xf7, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAnnShowLockedIcon(BOOL propVal)
{
	SetProperty(0xf7, VT_BOOL, propVal);
}

BOOL CLead::GetAnnHyperlinkMenuEnable()
{
	BOOL result;
	GetProperty(0xf8, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAnnHyperlinkMenuEnable(BOOL propVal)
{
	SetProperty(0xf8, VT_BOOL, propVal);
}

BOOL CLead::GetEnableZoomInRect()
{
	BOOL result;
	GetProperty(0xf9, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetEnableZoomInRect(BOOL propVal)
{
	SetProperty(0xf9, VT_BOOL, propVal);
}

short CLead::GetTwainIntensity()
{
	short result;
	GetProperty(0xfa, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTwainIntensity(short propVal)
{
	SetProperty(0xfa, VT_I2, propVal);
}

short CLead::GetTwainContrast()
{
	short result;
	GetProperty(0xfb, VT_I2, (void*)&result);
	return result;
}

void CLead::SetTwainContrast(short propVal)
{
	SetProperty(0xfb, VT_I2, propVal);
}

short CLead::GetEnableTwainFeeder()
{
	short result;
	GetProperty(0xfc, VT_I2, (void*)&result);
	return result;
}

void CLead::SetEnableTwainFeeder(short propVal)
{
	SetProperty(0xfc, VT_I2, propVal);
}

short CLead::GetEnableTwainAutoFeed()
{
	short result;
	GetProperty(0xfd, VT_I2, (void*)&result);
	return result;
}

void CLead::SetEnableTwainAutoFeed(short propVal)
{
	SetProperty(0xfd, VT_I2, propVal);
}

float CLead::GetPanWinX()
{
	float result;
	GetProperty(0xfe, VT_R4, (void*)&result);
	return result;
}

void CLead::SetPanWinX(float propVal)
{
	SetProperty(0xfe, VT_R4, propVal);
}

float CLead::GetPanWinY()
{
	float result;
	GetProperty(0xff, VT_R4, (void*)&result);
	return result;
}

void CLead::SetPanWinY(float propVal)
{
	SetProperty(0xff, VT_R4, propVal);
}

float CLead::GetPanWinWidth()
{
	float result;
	GetProperty(0x100, VT_R4, (void*)&result);
	return result;
}

void CLead::SetPanWinWidth(float propVal)
{
	SetProperty(0x100, VT_R4, propVal);
}

float CLead::GetPanWinHeight()
{
	float result;
	GetProperty(0x101, VT_R4, (void*)&result);
	return result;
}

void CLead::SetPanWinHeight(float propVal)
{
	SetProperty(0x101, VT_R4, propVal);
}

unsigned long CLead::GetPanWinRectColor()
{
	unsigned long result;
	GetProperty(0x102, VT_I4, (void*)&result);
	return result;
}

void CLead::SetPanWinRectColor(unsigned long propVal)
{
	SetProperty(0x102, VT_I4, propVal);
}

CString CLead::GetPanWinTitle()
{
	CString result;
	GetProperty(0x103, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetPanWinTitle(LPCTSTR propVal)
{
	SetProperty(0x103, VT_BSTR, propVal);
}

BOOL CLead::GetPanWinSysMenu()
{
	BOOL result;
	GetProperty(0x104, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetPanWinSysMenu(BOOL propVal)
{
	SetProperty(0x104, VT_BOOL, propVal);
}

short CLead::GetPanWinPaintPalette()
{
	short result;
	GetProperty(0x105, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPanWinPaintPalette(short propVal)
{
	SetProperty(0x105, VT_I2, propVal);
}

short CLead::GetPanWinBitonalScaling()
{
	short result;
	GetProperty(0x106, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPanWinBitonalScaling(short propVal)
{
	SetProperty(0x106, VT_I2, propVal);
}

short CLead::GetPanWinPaintDither()
{
	short result;
	GetProperty(0x107, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPanWinPaintDither(short propVal)
{
	SetProperty(0x107, VT_I2, propVal);
}

CPicture CLead::GetPanWinIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x108, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLead::SetPanWinIcon(LPDISPATCH propVal)
{
	SetProperty(0x108, VT_DISPATCH, propVal);
}

short CLead::GetPanWinPointer()
{
	short result;
	GetProperty(0x109, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPanWinPointer(short propVal)
{
	SetProperty(0x109, VT_I2, propVal);
}

CPicture CLead::GetPanWinCursor()
{
	LPDISPATCH pDispatch;
	GetProperty(0x10a, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLead::SetPanWinCursor(LPDISPATCH propVal)
{
	SetProperty(0x10a, VT_DISPATCH, propVal);
}

short CLead::GetInfoTotalPages()
{
	short result;
	GetProperty(0x10b, VT_I2, (void*)&result);
	return result;
}

void CLead::SetInfoTotalPages(short propVal)
{
	SetProperty(0x10b, VT_I2, propVal);
}

short CLead::GetSavePage()
{
	short result;
	GetProperty(0x10c, VT_I2, (void*)&result);
	return result;
}

void CLead::SetSavePage(short propVal)
{
	SetProperty(0x10c, VT_I2, propVal);
}

long CLead::GetAnimationBitmap()
{
	long result;
	GetProperty(0x10d, VT_I4, (void*)&result);
	return result;
}

void CLead::SetAnimationBitmap(long propVal)
{
	SetProperty(0x10d, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLead オペレーション

void CLead::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CLead::Average(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLead::Median(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLead::Contrast(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x110, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLead::Despeckle()
{
	short result;
	InvokeHelper(0x111, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Flip()
{
	short result;
	InvokeHelper(0x112, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Grayscale(short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x113, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel);
	return result;
}

short CLead::HistoEqualize()
{
	short result;
	InvokeHelper(0x114, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Hue(short iAngle)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x115, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle);
	return result;
}

short CLead::Intensity(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x116, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLead::Invert()
{
	short result;
	InvokeHelper(0x117, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::TwainAcquire(long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x118, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd);
	return result;
}

short CLead::TwainSelect(long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x119, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd);
	return result;
}

short CLead::Sharpen(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLead::Saturation(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLead::Reverse()
{
	short result;
	InvokeHelper(0x11c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::ForceRepaint()
{
	short result;
	InvokeHelper(0x11d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Mosaic(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLead::SpatialFilter(short iType)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType);
	return result;
}

short CLead::BinaryFilter(short iType)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x120, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType);
	return result;
}

short CLead::Save(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x121, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLead::Posterize(short iLevels)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x122, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iLevels);
	return result;
}

CPicture CLead::GetPicture()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x123, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPicture(pDispatch);
}

short CLead::SetPicture(LPDISPATCH pPicture)
{
	short result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x124, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pPicture);
	return result;
}

short CLead::Rotate(long iAngle, BOOL bResize, unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I4;
	InvokeHelper(0x125, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle, bResize, crFill);
	return result;
}

short CLead::Emboss(short iDirection, short iDepth)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x126, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDirection, iDepth);
	return result;
}

short CLead::AddNoise(short iRange, short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x127, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRange, iChannel);
	return result;
}

short CLead::IntensityDetect(short iLow, short iHigh)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x128, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iLow, iHigh);
	return result;
}

short CLead::Fill(unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x129, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crFill);
	return result;
}

short CLead::StretchIntensity()
{
	short result;
	InvokeHelper(0x12a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Deskew()
{
	short result;
	InvokeHelper(0x12b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::GammaCorrect(short iGamma)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x12c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iGamma);
	return result;
}

short CLead::Shear(short iAngle, BOOL bHorizontal, unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_I4;
	InvokeHelper(0x12d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle, bHorizontal, crFill);
	return result;
}

short CLead::CreateBitmap(float fWidth, float fHeight, short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x12e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iBitsPerPixel);
	return result;
}

short CLead::Render(long hDC, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x12f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, fLeft, fTop, fWidth, fHeight);
	return result;
}

long CLead::GetBitmapDC()
{
	long result;
	InvokeHelper(0x130, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLead::ReleaseBitmapDC()
{
	short result;
	InvokeHelper(0x131, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Halftone(short iType, long iAngle)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x132, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType, iAngle);
	return result;
}

short CLead::Size(float fWidth, float fHeight, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x133, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iFlags);
	return result;
}

short CLead::Copy(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x134, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLead::Paste(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x135, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLead::Load(LPCTSTR pszName, short iBitsPerPixel, short iPage, short iPages)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x136, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, iPage, iPages);
	return result;
}

short CLead::SetDIB(long hDIB)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x137, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDIB);
	return result;
}

long CLead::GetDIB()
{
	long result;
	InvokeHelper(0x138, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLead::SetDDB(long hDC, long hBitmap, long hPalette)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x139, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, hBitmap, hPalette);
	return result;
}

long CLead::GetDDB(long hDC)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC);
	return result;
}

short CLead::RemapIntensity(short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x13b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChannel);
	return result;
}

short CLead::GetHistogram(short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x13c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChannel);
	return result;
}

short CLead::ColorRes(short iBitsPerPixel, short iPalette, short iDither, short iColors)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x13d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, iPalette, iDither, iColors);
	return result;
}

short CLead::Capture(long hDC, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x13e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::ColorSeparate(long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLead::ColorMerge(long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x140, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLead::Underlay(long hBitmap, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x141, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, iFlags);
	return result;
}

short CLead::Combine(float fLeft, float fTop, float fWidth, float fHeight, long hBitmap, float fSrcLeft, float fSrcTop, long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x142, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmap, fSrcLeft, fSrcTop, iFlags);
	return result;
}

short CLead::SetDstRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x143, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::SetDstClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x144, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::SetSrcRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x145, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::SetSrcClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x146, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::Trim(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x147, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::HistoContrast(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x148, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLead::GetFileInfo(LPCTSTR pszName, short iPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x149, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iPage);
	return result;
}

short CLead::SaveWithStamp(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, float fStampWidth, float fStampHeight, short iStampBits)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x14a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, fStampWidth, fStampHeight, iStampBits);
	return result;
}

short CLead::LoadStamp(LPCTSTR pszName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x14b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName);
	return result;
}

void CLead::SetRubberBandRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x14c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fLeft, fTop, fWidth, fHeight);
}

long CLead::GetClientDC()
{
	long result;
	InvokeHelper(0x14d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLead::ReleaseClientDC()
{
	short result;
	InvokeHelper(0x14e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CLead::dbAddNew()
{
	InvokeHelper(0x14f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLead::dbDelete()
{
	InvokeHelper(0x150, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLead::dbEdit()
{
	InvokeHelper(0x151, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLead::dbMove(long lRows)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x152, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lRows);
}

void CLead::dbMoveFirst()
{
	InvokeHelper(0x153, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLead::dbMoveLast()
{
	InvokeHelper(0x154, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLead::dbMoveNext()
{
	InvokeHelper(0x155, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLead::dbMovePrev()
{
	InvokeHelper(0x156, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLead::dbClose()
{
	InvokeHelper(0x157, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CLead::GetPalette(long hDC)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x158, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC);
	return result;
}

BOOL CLead::dbRequery()
{
	BOOL result;
	InvokeHelper(0x159, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLead::dbOpen(LPCTSTR pszConnect, LPCTSTR pszSQL, LPCTSTR pszField, long iOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x15a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pszConnect, pszSQL, pszField, iOptions);
	return result;
}

short CLead::dbUpdate(short iFormat, short iBitsPerPixel, short iQuality)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x15b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, iBitsPerPixel, iQuality);
	return result;
}

long CLead::PrintStart()
{
	long result;
	InvokeHelper(0x15c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CLead::PrintEnd(long hDC)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC);
}

short CLead::TwainRealize(long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd);
	return result;
}

short CLead::TwainEnumSources(long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x15f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd);
	return result;
}

void CLead::UnlockSupport(short iType, LPCTSTR pszKey)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x160, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iType, pszKey);
}

BOOL CLead::IsSupportLocked(short iType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x161, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iType);
	return result;
}

short CLead::StartFeedLoad(short iBitsPerPixel, short iPage, short iPages)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x162, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, iPage, iPages);
	return result;
}

short CLead::StopFeedLoad()
{
	short result;
	InvokeHelper(0x163, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::SaveMemory(long* phMem, short iFormat, short iBitsPerPixel, short iQuality, long* piSize)
{
	short result;
	static BYTE parms[] =
		VTS_PI4 VTS_I2 VTS_I2 VTS_I2 VTS_PI4;
	InvokeHelper(0x164, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		phMem, iFormat, iBitsPerPixel, iQuality, piSize);
	return result;
}

short CLead::LoadMemory(long hMem, short iBitsPerPixel, short iPage, long iSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x165, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iBitsPerPixel, iPage, iSize);
	return result;
}

short CLead::GetMemoryInfo(long hMem, short iPage, long iSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x166, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iPage, iSize);
	return result;
}

short CLead::FeedLoad(const VARIANT& vBuffer, long iSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x167, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vBuffer, iSize);
	return result;
}

BOOL CLead::DeleteRgnHandle(long hRgn)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x168, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hRgn);
	return result;
}

short CLead::FreeRgn()
{
	short result;
	InvokeHelper(0x169, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CLead::GetRgnArea()
{
	long result;
	InvokeHelper(0x16a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CLead::GetRgnHandle()
{
	long result;
	InvokeHelper(0x16b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CLead::IsPtInRgn(float fx, float fy)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x16c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fx, fy);
	return result;
}

short CLead::OffsetRgn(float fDx, float fDy)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x16d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fDx, fDy);
	return result;
}

short CLead::SetRgnColor(unsigned long crMatch, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x16e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crMatch, iCombineMode);
	return result;
}

short CLead::SetRgnHandle(long hRgn, float fDx, float fDy, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x16f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hRgn, fDx, fDy, iCombineMode);
	return result;
}

short CLead::SetRgnEllipse(float fLeft, float fTop, float fWidth, float fHeight, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x170, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, iCombineMode);
	return result;
}

short CLead::SetRgnRect(float fLeft, float fTop, float fWidth, float fHeight, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x171, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, iCombineMode);
	return result;
}

short CLead::SetRgnRoundRect(float fLeft, float fTop, float fWidth, float fHeight, float fWidthEllipse, float fHeightEllipse, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x172, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, fWidthEllipse, fHeightEllipse, iCombineMode);
	return result;
}

BOOL CLead::IsPtInFloater(float fx, float fy)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x173, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fx, fy);
	return result;
}

long CLead::GetFloaterHandle()
{
	long result;
	InvokeHelper(0x174, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLead::SetFloaterDstRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x175, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::SetFloaterDstClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x176, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::SetRgnPolygon(short iFillMode, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x177, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFillMode, iCombineMode);
	return result;
}

short CLead::RepaintRect(float fLeft, float fTop, float fWidth, float fHeight, BOOL bErase)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x178, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, bErase);
	return result;
}

short CLead::AnnSetTag(long hObject, long iTag)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x179, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iTag);
	return result;
}

long CLead::AnnGetTag(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLead::AnnGetType(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLead::AnnSave(LPCTSTR pszFile, short iFormat, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BOOL;
	InvokeHelper(0x17c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, iFormat, fSelected);
	return result;
}

short CLead::AnnLoad(LPCTSTR pszFile, short iPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x17d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, iPage);
	return result;
}

short CLead::AnnCopy(short iFormat, BOOL fSelected, BOOL fEmpty)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x17e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, fSelected, fEmpty);
	return result;
}

short CLead::AnnPaste()
{
	short result;
	InvokeHelper(0x17f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::AnnRealize(BOOL fRedactOnly)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x180, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fRedactOnly);
	return result;
}

short CLead::AnnFlip(BOOL bUseHorz, float fHorz, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_BOOL;
	InvokeHelper(0x181, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseHorz, fHorz, bSelected);
	return result;
}

short CLead::AnnReverse(BOOL bUseVert, float fVert, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_BOOL;
	InvokeHelper(0x182, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseVert, fVert, bSelected);
	return result;
}

short CLead::AnnRotate(BOOL bUseCenter, float fCenterX, float fCenterY, float fAngle, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x183, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseCenter, fCenterX, fCenterY, fAngle, bSelected);
	return result;
}

short CLead::AnnSetAutoText(short iItem, LPCTSTR pszText)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x184, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iItem, pszText);
	return result;
}

CString CLead::AnnGetAutoText(short iItem)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x185, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		iItem);
	return result;
}

short CLead::ColorResList(short iBitsPerPixel, short iPalette, short iDither, short iColors)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x186, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, iPalette, iDither, iColors);
	return result;
}

long CLead::GetColorCount()
{
	long result;
	InvokeHelper(0x187, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLead::InsertBitmapListItem(short iIndex, long hBitmap)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x188, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iIndex, hBitmap);
	return result;
}

short CLead::EnumDimensions(LPCTSTR pszFile)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x189, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile);
	return result;
}

short CLead::SetDimension(short iFormat, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_R4 VTS_R4;
	InvokeHelper(0x18a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, fWidth, fHeight);
	return result;
}

short CLead::GetDimension(short iFormat)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat);
	return result;
}

short CLead::GetServerBitmap(long pServer)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pServer);
	return result;
}

short CLead::SetServerBitmap(long pServer)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pServer);
	return result;
}

short CLead::DeleteBitmapListItems(short iIndex, short iCount)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x18e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iIndex, iCount);
	return result;
}

short CLead::AnnLoadMemory(long hMem, long iSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x18f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iSize);
	return result;
}

short CLead::AnnSaveMemory(long* phMem, short iFormat, BOOL bSelected, long* piSize)
{
	short result;
	static BYTE parms[] =
		VTS_PI4 VTS_I2 VTS_BOOL VTS_PI4;
	InvokeHelper(0x190, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		phMem, iFormat, bSelected, piSize);
	return result;
}

short CLead::DrawEllipse(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x191, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::DrawRectangle(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x192, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::DrawLine(float fX1, float fY1, float fX2, float fY2)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x193, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fX1, fY1, fX2, fY2);
	return result;
}

short CLead::DrawTextOut(float fx, float fy, LPCTSTR pszText)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BSTR;
	InvokeHelper(0x194, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fx, fy, pszText);
	return result;
}

float CLead::DrawTextWidth(LPCTSTR pszText)
{
	float result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x195, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		pszText);
	return result;
}

float CLead::DrawTextHeight(LPCTSTR pszText)
{
	float result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x196, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		pszText);
	return result;
}

short CLead::ZoomToRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x197, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::Solarize(short iThreshold)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x198, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold);
	return result;
}

short CLead::AutoTrim(short iThreshold)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x199, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold);
	return result;
}

short CLead::MinFilter(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLead::MaxFilter(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLead::Oilify(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

VARIANT CLead::ReadComment(LPCTSTR pszFile, short iPage, short iIndex)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x19d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		pszFile, iPage, iIndex);
	return result;
}

long CLead::AnnGetPointCount(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

VARIANT CLead::AnnGetPointX(long hObject)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		hObject);
	return result;
}

VARIANT CLead::AnnGetPointY(long hObject)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a0, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		hObject);
	return result;
}

short CLead::AnnGetSelectCount()
{
	short result;
	InvokeHelper(0x1a1, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

VARIANT CLead::AnnGetSelectList()
{
	VARIANT result;
	InvokeHelper(0x1a2, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

short CLead::FastRotate(short iAngle)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1a3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle);
	return result;
}

short CLead::AnnMove(float dxOffset, float dyOffset, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x1a4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		dxOffset, dyOffset, bSelected);
	return result;
}

short CLead::DrawShape(short uShape, long BackgroundImage)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x1a5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uShape, BackgroundImage);
	return result;
}

short CLead::DrawText(LPCTSTR szText, long ForegroundImage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1a6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		szText, ForegroundImage);
	return result;
}

short CLead::WindowLevel()
{
	short result;
	InvokeHelper(0x1a7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::GetMinMaxVal()
{
	short result;
	InvokeHelper(0x1a8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::GetMinMaxBits()
{
	short result;
	InvokeHelper(0x1a9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::AnnLock(long hObject, LPCTSTR pszKey, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x1aa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszKey, fSelected);
	return result;
}

short CLead::AnnUnlock(long hObject, LPCTSTR pszKey)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x1ab, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszKey);
	return result;
}

BOOL CLead::AnnGetLocked(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1ac, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLead::AnnUnrealize(long hObject, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1ad, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fSelected);
	return result;
}

short CLead::AnnSaveTag(BOOL fWangMode, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x1ae, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWangMode, fSelected);
	return result;
}

short CLead::AnnSetHyperlinkString(long hObject, short uType, LPCTSTR pszHyperlink)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x1af, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, uType, pszHyperlink);
	return result;
}

short CLead::AnnSetHyperlinkMsg(long hObject, short uType, long lParam1, long lParam2, long lParam3, long lParam4, long lParam5)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1b0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, uType, lParam1, lParam2, lParam3, lParam4, lParam5);
	return result;
}

short CLead::AnnGetHyperlinkType(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

CString CLead::AnnGetHyperlinkString(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b2, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

long CLead::AnnGetHyperlinkParam(long hObject, short iParamIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x1b3, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject, iParamIndex);
	return result;
}

short CLead::PreLoadFilters(short iFixedFilters, short iCachedFilters, LPCTSTR pszFilters)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x1b4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFixedFilters, iCachedFilters, pszFilters);
	return result;
}

short CLead::IgnoreFilters(LPCTSTR pszFilters)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1b5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFilters);
	return result;
}

short CLead::ZoomIn()
{
	short result;
	InvokeHelper(0x1b6, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::TwainCloseSession(long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd);
	return result;
}

short CLead::ShowPanWin(BOOL bShow)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1b8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bShow);
	return result;
}

short CLead::DeletePage(LPCTSTR pszName, short iPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x1b9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iPage);
	return result;
}

short CLead::Picturize(LPCTSTR pszDirectory, short iFlags, float fCellWidth, float fCellHeight)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_R4 VTS_R4;
	InvokeHelper(0x1ba, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszDirectory, iFlags, fCellWidth, fCellHeight);
	return result;
}

unsigned long CLead::GetBitmapPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1bb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetBitmapPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x1bb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

short CLead::GetRemapTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1bc, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetRemapTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1bc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

long CLead::GetHistogramTable(short iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1bd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetHistogramTable(short iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x1bd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

unsigned long CLead::GetUserPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1be, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetUserPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x1be, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

long CLead::GetColorPlanes(short iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1bf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetColorPlanes(short iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x1bf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

BOOL CLead::GetInfoPCDRes(short iIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1c0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		iIndex);
	return result;
}

CString CLead::GetTwainSourceList(short iIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1c1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		iIndex);
	return result;
}

float CLead::GetPolygonX(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1c2, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetPolygonX(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x1c2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLead::GetPolygonY(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1c3, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetPolygonY(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x1c3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

unsigned long CLead::GetAnimationPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1c4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetAnimationPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x1c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLead::GetDimensionWidth(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1c5, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

float CLead::GetDimensionHeight(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1c6, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

VARIANT CLead::GetComment(short iIndex)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1c7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetComment(short iIndex, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x1c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, &newValue);
}

unsigned long CLead::GetPixel(float x, float y)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x1c8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		x, y);
	return result;
}

void CLead::SetPixel(float x, float y, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x1c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 x, y, newValue);
}

unsigned long CLead::GetLevelLUT(long iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1c9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetLevelLUT(long iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

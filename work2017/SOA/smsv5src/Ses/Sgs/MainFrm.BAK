
// MainFrm.cpp : CMainFrame クラスの実装
//

#include "stdafx.h"

#include <stdio.h>
#include <conio.h>
#include <direct.h>
#include <stdlib.h>

#include "MainFrm.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

typedef struct {
	GLOBALHANDLE	hGmem;
	int				nCount;
}ENUMER;

//extern "C" {
#include "../../ObjLib/Baselib.h"
#include "../../ObjLib/Senvlib.h"
#include "../../ObjLib/Scrnlib.h"
#include "../../ObjLib/Curvelib.h"
#include "../../ObjLib/Diblib.h"
#include "../../ObjLib/Plgnfill.h"
#include "../../ObjLib/Pout.h"
#include "../../ObjLib/Figuenv.h"
#include "../../ObjLib/Mojienv.h"
#include "../../ObjLib/Wakuenv.h"
//}

// CMainFrame

IMPLEMENT_DYNAMIC(CMainFrame, CMDIFrameWnd)

BEGIN_MESSAGE_MAP(CMainFrame, CMDIFrameWnd)
	ON_WM_CREATE()
	ON_WM_ACTIVATE()
	ON_WM_KEYUP()
	ON_WM_PAINT()
	//}}AFX_MSG_MAP
	ON_COMMAND_EX(ID_VIEW_TOOLBAR, OnBarCheck)
	ON_UPDATE_COMMAND_UI(ID_VIEW_TOOLBAR, OnUpdateControlBarMenu)
END_MESSAGE_MAP()

static UINT indicators[] =
{
	ID_SEPARATOR,           // ステータス ライン インジケーター
	ID_INDICATOR_TEXT1,
	ID_INDICATOR_TEXT1,
	ID_INDICATOR_TEXT3,
	ID_SEPARATOR,
};

static CSize GetBaseUnits()
{
	return CSize(8, 16);
}
static int m_nCount = 0;

// CMainFrame コンストラクション/デストラクション

CMainFrame::CMainFrame() noexcept
{
	TCHAR	szExePath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];

	// TODO: この位置にメンバの初期化処理コードを追加してください。
	m_nFirstFlag = TRUE;
	m_dwClr = 0;
	m_nOptSlctObj = 0;
	m_nOptChangeCurser = 0;
	m_nEpsClrTrns = OFF;

	// Gdiplus初期化
	GdiplusStartup(&m_gdiToken, &m_gdiSI, NULL);

	// 初期化の位置を移動
	InitExePath(szExePath);
	senvsetexepath(szExePath);

	curveinit();
	senvinit();
	scrninit();
	_stprintf_s(fname, FNAMEMAX, _T("%s\\defenv\\clrtrns.env"), szExePath);
	mojienvinit();
	diblibinit();

	EnvLoad();

	m_pcFSF1Font = new CFSF1Font(0);
	m_pcWNTTFont = new CWinTTFont(0);
	m_pcESF0Font = new CESF0Font(0);
	m_pcESF1Font = new CESF1Font(0);
	m_pcARCFont = new CARCFont(0);
	m_pcWNTTFont->FSF1ClassSet(m_pcFSF1Font);
	m_pcESF0Font->FSF1ClassSet(m_pcFSF1Font);
	m_pcESF1Font->FSF1ClassSet(m_pcFSF1Font);
	m_pcARCFont->FSF1ClassSet(m_pcFSF1Font);
	m_pcWNTTFont->ParentSet(this);
	plgnfillinit();
	plgnfillareaset(-INTMAX, -INTMAX, INTMAX, INTMAX);
	senvinitscrnclr();
	DivDrawEnvLoad();
}

CMainFrame::~CMainFrame()
{
	GdiplusShutdown(m_gdiToken);

	senvendscrnclr();
	senvend();
	scrnend();
	plgnfillend();
	diblibend();
	//EnvSave();
	mojienvflistclose();
	delete(m_pcARCFont);
	delete(m_pcESF1Font);
	delete(m_pcESF0Font);
	delete(m_pcWNTTFont);
	delete(m_pcFSF1Font);
}
void CMainFrame::InitExePath(LPTSTR szExePath)
{
	int		len;

	len = ::GetModuleFileName(AfxGetInstanceHandle(), szExePath, FNAMEMAX);
	while (1) {
		if (len <= 0) {
			szExePath[0] = _T('\0');
			break;
		}
		if (szExePath[len] == _T(':') || szExePath[len] == _T('\\')) {
			szExePath[len] = _T('\0');
			break;
		}
		len--;
	}
}
int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	lpCreateStruct->lpszClass = _T("筆耕システム 外字作成部");
	if (CMDIFrameWnd::OnCreate(lpCreateStruct) == -1)
		return -1;

	m_szBaseUnits = GetBaseUnits();

	if (!m_wndStatusBar.Create(this)
	||  !m_wndStatusBar.SetIndicators(indicators, sizeof(indicators) / sizeof(UINT)))
	{
		TRACE0("ステータス バーの作成に失敗しました。\n");
		return -1;      // 作成できない場合
	}

	// TODO: ツール バーをドッキング可能にしない場合は、これらの 3 行を削除してください。
	if (!CreateWakuBarG1())
		return -1;

	if (!CreateWakuBarG2())
		return -1;

	if (!m_wndLeftSideBar.CreateEx(this, TBSTYLE_FLAT, WS_CHILD | WS_VISIBLE | CBRS_LEFT
		| CBRS_GRIPPER | CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC) ||
		!m_wndLeftSideBar.LoadToolBar(IDR_LEFTSIDE))
	{
		TRACE0("Failed to create cdnttoolbar\n");
		return -1;      // 作成に失敗
	}

	m_wndWakuBarG1.EnableDocking(CBRS_ALIGN_TOP);
	m_wndWakuBarG2.EnableDocking(CBRS_ALIGN_BOTTOM);
	m_wndLeftSideBar.EnableDocking(CBRS_ALIGN_LEFT);
	EnableDocking(CBRS_ALIGN_ANY);
	DockControlBar(&m_wndWakuBarG1, AFX_IDW_DOCKBAR_TOP);
	DockControlBar(&m_wndWakuBarG2, AFX_IDW_DOCKBAR_BOTTOM);

	return 0;
}
void CMainFrame::DockControlBarLeftOf(CToolBar* Bar, CToolBar* LeftOf)
{
	CRect rect;
	DWORD dw;
	UINT n;

	// get MFC to adjust the dimensions of all docked ToolBars
	// so that GetWindowRect will be accurate
	RecalcLayout();
	LeftOf->GetWindowRect(&rect);
	rect.OffsetRect(1, 0);
	dw = LeftOf->GetBarStyle();
	n = 0;
	n = (dw&CBRS_ALIGN_TOP) ? AFX_IDW_DOCKBAR_TOP : n;
	n = (dw&CBRS_ALIGN_BOTTOM && n == 0) ? AFX_IDW_DOCKBAR_BOTTOM : n;
	n = (dw&CBRS_ALIGN_LEFT && n == 0) ? AFX_IDW_DOCKBAR_LEFT : n;
	n = (dw&CBRS_ALIGN_RIGHT && n == 0) ? AFX_IDW_DOCKBAR_RIGHT : n;

	// When we take the default parameters on rect, DockControlBar will dock
	// each Toolbar on a seperate line.  By calculating a rectangle, we in effect
	// are simulating a Toolbar being dragged to that location and docked.
	DockControlBar(Bar, n, &rect);
}
BOOL CMainFrame::PreCreateWindow(CREATESTRUCT& cs)
{
	cs.dwExStyle |= WS_EX_TOPMOST;
	if (!CMDIFrameWnd::PreCreateWindow(cs)) {
		return FALSE;
	}
	return TRUE;
}

// CMainFrame の診断

#ifdef _DEBUG
void CMainFrame::AssertValid() const
{
	CMDIFrameWnd::AssertValid();
}

void CMainFrame::Dump(CDumpContext& dc) const
{
	CMDIFrameWnd::Dump(dc);
}
#endif //_DEBUG

// CMainFrame メッセージ ハンドラー
void CMainFrame::StatXYOut(DBL xabs, DBL yabs)
{
	TCHAR	xbuf[QRECMAX];
	TCHAR	ybuf[QRECMAX];
	TCHAR	msgbuf[QRECMAX];

	if (xabs > 10000 || yabs > 10000) {
		_stprintf_s(xbuf, _T("%6.2lf"), xabs / 1000);
		_stprintf_s(ybuf, _T("%6.2lf"), yabs / 1000);
		_stprintf_s(msgbuf, _T("(%s,%s)M"), xbuf, ybuf);
	}
	else {
		_stprintf_s(xbuf, _T("%6.1lf"), xabs);
		_stprintf_s(ybuf, _T("%6.1lf"), yabs);
		_stprintf_s(msgbuf, _T("(%s,%s)mm"), xbuf, ybuf);
	}
	HelpTextOut(4, msgbuf);
}

void CMainFrame::HelpTextOut(int idx, LPTSTR msgbuf)
{
	m_wndStatusBar.SetPaneText(idx, msgbuf, TRUE);
}

BOOL CMainFrame::CreateWakuBarG1()
{
	if (!m_wndWakuBarG1.Create(this, IDD_WAKUBARG1,
		CBRS_TOP | CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_HIDE_INPLACE,
		ID_VIEW_WAKUBAR3))
	{
		TRACE0("Failed to create dialog bar m_wndWakuBarG1\n");
		return FALSE;		// 作成に失敗
	}
	return TRUE;
}

BOOL CMainFrame::CreateWakuBarG2()
{
	if (!m_wndWakuBarG2.Create(this, IDD_WAKUBARG2,
		CBRS_BOTTOM | CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_HIDE_INPLACE,
		ID_VIEW_WAKUBAR3))
	{
		TRACE0("Failed to create dialog bar m_wndWakuBarG2\n");
		return FALSE;		// 作成に失敗
	}
	return TRUE;
}

void CMainFrame::InitItemElement()
{
}

void CMainFrame::SetItemElement()
{
	m_wndWakuBarG1.SetItemElement();
}

void CMainFrame::GetItemElement()
{
}

void CMainFrame::ShowItemElement()
{
}

void CMainFrame::HideItemElement()
{
}

void CMainFrame::OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized)
{
	CMDIFrameWnd::OnActivate(nState, pWndOther, bMinimized);
}

void CMainFrame::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	// TODO: この位置にメッセージ ハンドラ用のコードを追加するかまたはデフォルトの処理を呼び出してください

	CMDIFrameWnd::OnKeyUp(nChar, nRepCnt, nFlags);
}

void CMainFrame::OnPaint()
{
	CPaintDC dc(this);
	if (m_nFirstFlag == TRUE) {
		m_nFirstFlag = FALSE;
		MDIMaximize(this);
		//::SetWindowPos(this->m_hWnd, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOSIZE|SWP_NOMOVE);
		::SetWindowPos(this->m_hWnd, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE);
		//::SetWindowPos(this->m_hWnd, HWND_TOP, 0, 0, 0, 0, SWP_NOSIZE|SWP_NOMOVE);
		//::SetForegroundWindow(this->m_hWnd);
	}
}

void CMainFrame::ThisViewMax(CTonView *pcView)
{
	MDIMaximize(pcView->GetParentFrame());
}

void CMainFrame::SetCrtView(CTonView * pcView)
{
	m_pcCrtView = pcView;
	SetItemElement();
}

void CMainFrame::EnvLoad()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	crctfname[FNAMEMAX];
	FILE	*crctfp;

	ScrnEnvLoad();
	ScrnAddEnvLoad();
	MojiEnvLoad();
	FiguEnvLoad();
	FontEnvLoad();
	senvgetexepath(exepath);
	_stprintf_s(crctfname, _T("%s\\outcrect.dat"), exepath);
	_tfopen_s(&crctfp, crctfname, _T("w,ccs=UNICODE"));
	if (crctfp == NULL) {
		fclose(crctfp);
	}
}

void CMainFrame::EnvSave()
{
	ScrnEnvSave();
	ScrnAddEnvSave();
	MojiEnvSave();
	FiguEnvSave();
}

void CMainFrame::ScrnEnvLoad()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	exedrive[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	TCHAR	buf[FNAMEMAX];
	DBL		dclrlebel;
	DBL		dmmx, dmmy;
	int		ncntrkind;
	TCHAR	sportname[QRECMAX];
	TCHAR	splotername[QRECMAX];
	int		npcmdtype;
	DBL		dpxsize, dpysize;
	DBL		dpstep;
	DBL		dpsx, dpsy;
	int		nparcflag, npfillflag;
	int		nphomemode, nplinemode, npomitmode;
	DBL		dpxtime, dpytime;
	TCHAR	datpath[FNAMEMAX];
	TCHAR	tmppath[FNAMEMAX];
	TCHAR	wakpath[FNAMEMAX];
	TCHAR	kmnpath[FNAMEMAX];
	TCHAR	outpath[FNAMEMAX];
	TCHAR	partpath[FNAMEMAX];
	TCHAR	btppath[FNAMEMAX];
	TCHAR	fntpath[FNAMEMAX];

	senvgetexepath(exepath);
	_tcscpy_s(exedrive, exepath);
	exedrive[2] = _T('\0');
	_tcscpy_s(m_szKaisyaName, _T("未設定"));
	dmmx = 300; dmmy = 300;
	ncntrkind = LEFTDOWN;
	_tcscpy_s(splotername, _T("HPGL"));
	npcmdtype = HPGL;
	dpxsize = 590.0; dpysize = 430.0;
	dpstep = 0.1;
	dpsx = -295; dpsy = -215;
	nparcflag = OFF; npfillflag = OFF;
	nphomemode = ON; nplinemode = ON; npomitmode = ON;
	dpxtime = 1.0; dpytime = 1.0;
	_tcscpy_s(sportname, _T("LPT1:"));
	_stprintf_s(fntpath, _T("%s\\moji"), exepath);
	//strcat(exedrive, _T("\\es98use"));
	_stprintf_s(datpath, _T("%s\\data"), exepath);
	_stprintf_s(outpath, _T("%s\\dout"), exepath);
	_stprintf_s(kmnpath, _T("%s\\kamon"), exepath);
	_stprintf_s(wakpath, _T("%s\\waku"), exepath);
	_stprintf_s(wakpath, _T("%s\\part"), exepath);
	_stprintf_s(tmppath, _T("%s\\temp"), exepath);
	_stprintf_s(btppath, _T("%s\\tbmp"), exepath);

	_stprintf_s(fname, _T("%s\\ses_sys.env"), exepath);
	_tfopen_s(&fp, fname, _T("r"));
	if (fp != NULL) {
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), m_szKaisyaName, HRECMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%lf %lf"), &m_dBackMMX, &m_dBackMMY);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%d"), &ncntrkind);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), sportname, QRECMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s %d %lf %lf %lf %lf %lf"),
			splotername, QRECMAX, &npcmdtype,
			&dpxsize, &dpysize, &dpstep,
			&dpsx, &dpsy);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%d %d %d %d %d"),
			&nparcflag, &npfillflag,
			&nphomemode, &nplinemode, &npomitmode);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%lf"), &dclrlebel);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), fntpath, FNAMEMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), datpath, FNAMEMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), outpath, FNAMEMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), kmnpath, FNAMEMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), wakpath, FNAMEMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), partpath, FNAMEMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), tmppath, FNAMEMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), btppath, FNAMEMAX);
		fclose(fp);
	}
	CreateDirectory(fntpath, NULL);
	CreateDirectory(datpath, NULL);
	CreateDirectory(outpath, NULL);
	CreateDirectory(kmnpath, NULL);
	CreateDirectory(wakpath, NULL);
	CreateDirectory(partpath, NULL);
	CreateDirectory(tmppath, NULL);
	CreateDirectory(btppath, NULL);
	dmmx = 300; dmmy = 300;
	scrnsetmmsize(dmmx, dmmy);
	poutcntrkindset(ncntrkind);
	poutportnameset(sportname);
	poutploternameset(splotername);
	pouttypeset(npcmdtype);
	poutmmsizeset(dpxsize, dpysize);
	poutstepset(dpstep);
	poutmmstartset(dpsx, dpsy);
	poutarcflagset(nparcflag);
	poutfillflagset(npfillflag);
	poutmodeset(nphomemode, nplinemode, npomitmode);
	senvsetdatpath(datpath);
	senvsetwakpath(wakpath);
	senvsetkmnpath(kmnpath);
	senvsetoutpath(outpath);
	senvsetpartpath(partpath);
	senvsetbtppath(btppath);
	mojienvsetfontpath(fntpath);
	senvsettmppath(tmppath);
}

void CMainFrame::ScrnAddEnvLoad()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	TCHAR	buf[FNAMEMAX];
	TCHAR	pltname[FNAMEMAX];
	int		cntrmoveflag;
	int		startmoveflag;
	DBL		startmovexmm, startmoveymm;
	DBL		plotlimitstep, plotlimitr;
	DBL		plotstartspace, plotendspace;
	int		nareadotsize;
	int		npointdotsize;

	cntrmoveflag = 0;
	startmoveflag = 0;
	startmovexmm = 0.0; startmoveymm = 0.0;
	m_nTTEisuFlag = ON;
	plotlimitstep = 30000.0;
	plotlimitr = 30000.0;
	plotstartspace = 0;
	plotendspace = 0;
	nareadotsize = 6;
	npointdotsize = 3;

	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\ses_sys2.env"), exepath);
	_tfopen_s(&fp, fname, _T("r"));
	if (fp != NULL) {
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%s"), pltname, FNAMEMAX);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%d"), &cntrmoveflag);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%d"), &startmoveflag);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%lf %lf"), &startmovexmm, &startmoveymm);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%d"), &m_nTTEisuFlag);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%lf %lf %lf %lf"),
			&plotlimitstep, &plotlimitr,
			&plotstartspace, &plotendspace);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%d"), &nareadotsize);
		baselibCrDelFgets(buf, FNAMEMAX, fp);
		_stscanf_s(buf, _T("%d"), &npointdotsize);
		fclose(fp);
	}
	senvsetcrtpltname(pltname);
	scrnsetcntrmoveflag(cntrmoveflag);
	scrnsetstartmoveflag(startmoveflag);
	scrnsetstartmovemm(startmovexmm, startmoveymm);
	poutsetparaminit(plotlimitstep, plotlimitr, plotstartspace, plotendspace);
	senvsetareadotsize(nareadotsize);
	senvsetpointdotsize(npointdotsize);
}

void CMainFrame::MojiEnvLoad()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	TCHAR	buf[HRECMAX];
	TCHAR	fontname[QRECMAX];
	int		esseisu, arceisu;
	int		ftategaki, fspacekind;
	DBL		dmmfwidth, dmmfhight;
	DBL		dmmmojispace, dmmstrgspace;
	DBL		dmmstringlen;
	DBL		dmmstartx, dmmstarty;
	int		nconerkind, nstartkind;

	_tcscpy_s(fontname, _T("ＭＳ 明朝"));
	esseisu = -1;
	arceisu = -1;
	ftategaki = OFF;
	fspacekind = OFF;
	dmmfwidth = 100.0;
	dmmfhight = 100.0;
	dmmmojispace = 10.0;
	dmmstrgspace = 10.0;
	dmmstringlen = 500.0;
	dmmstartx = 100;
	dmmstarty = 100;
	nconerkind = LEFTUP;
	nstartkind = LEFTUP;

	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\ses_strg.env"), exepath);
	_tfopen_s(&fp, fname, _T("r"));
	if (fp != NULL) {
		baselibCrDelFgets(fontname, HRECMAX, fp);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%d %d"), &esseisu, &arceisu);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%d %d"), &ftategaki, &fspacekind);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%lf %lf"), &dmmfwidth, &dmmfhight);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%lf %lf"), &dmmmojispace, &dmmstrgspace);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%lf"), &dmmstringlen);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%lf %lf"), &dmmstartx, &dmmstarty);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%d %d"), &nstartkind, &nconerkind);
		fclose(fp);
	}
	mojienvsetfontname(fontname);
	mojienvsetesseisuno(esseisu);
	mojienvsetarceisuno(arceisu);
	mojienvsettategakiflag(ftategaki);
	mojienvsetspacekind(fspacekind);
	senvsetconerkind(nconerkind);
	mojienvsetstartkind(nstartkind);
	mojienvsetsize(dmmfwidth, dmmfhight);
	mojienvsetspace(dmmmojispace, dmmstrgspace);
	mojienvsetstrlen(dmmstringlen);
	mojienvsetstart(dmmstartx, dmmstarty);
}

void CMainFrame::FiguEnvLoad()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	TCHAR	buf[HRECMAX];
	int		cntrkind, plgncount;

	cntrkind = CNTRCNTR;
	plgncount = 5;
	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\ses_figu.env"), exepath);
	_tfopen_s(&fp, fname, _T("r"));
	if (fp != NULL) {
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%d\n"), &cntrkind);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%d\n"), &plgncount);
		fclose(fp);
	}
	figuenvsetcntrkind(cntrkind);
	figuenvsetplgncount(plgncount);
}

void CMainFrame::DivDrawEnvLoad()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	TCHAR	buf[HRECMAX];
	DBL		rag, mini, max;

	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\drawdiv.env"), exepath);
	_tfopen_s(&fp, fname, _T("r"));
	if (fp != NULL) {
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%lf %lf %lf"), &rag, &mini, &max);
		senvsetdrawdivbeze(rag, mini, max);
		baselibCrDelFgets(buf, HRECMAX, fp);
		_stscanf_s(buf, _T("%lf %lf %lf"), &rag, &mini, &max);
		senvsetdrawdivarc(rag, mini, max);
		fclose(fp);
	}
}

void CMainFrame::ScrnEnvSave()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	DBL		dclrlebel;
	DBL		dmmx, dmmy;
	int		ncntrkind;
	TCHAR	sportname[RECMAX];
	TCHAR	splotername[QRECMAX];
	int		npcmdtype;
	DBL		dpxsize, dpysize;
	DBL		dpstep;
	DBL		dpsx, dpsy;
	int		nparcflag, npfillflag;
	int		nphomemode, nplinemode, npomitmode;
	TCHAR	datpath[FNAMEMAX];
	TCHAR	tmppath[FNAMEMAX];
	TCHAR	wakpath[FNAMEMAX];
	TCHAR	kmnpath[FNAMEMAX];
	TCHAR	outpath[FNAMEMAX];
	TCHAR	partpath[FNAMEMAX];
	TCHAR	btppath[FNAMEMAX];
	TCHAR	fntpath[FNAMEMAX];

	scrngetmmsize(&dmmx, &dmmy);
	poutcntrkindget(&ncntrkind);
	poutportnameget(sportname);
	poutploternameget(splotername);
	pouttypeget(&npcmdtype);
	poutmmsizeget(&dpxsize, &dpysize);
	poutstepget(&dpstep);
	poutmmstartget(&dpsx, &dpsy);
	poutarcflagget(&nparcflag);
	poutfillflagget(&npfillflag);
	poutmodeget(&nphomemode, &nplinemode, &npomitmode);
	senvgetdatpath(datpath);
	senvgetwakpath(wakpath);
	senvgetkmnpath(kmnpath);
	senvgetoutpath(outpath);
	senvgetpartpath(partpath);
	senvgetbtppath(btppath);
	mojienvgetfontpath(fntpath);
	senvgettmppath(tmppath);
	dclrlebel = 0;
	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\ses_sys.env"), exepath);
	_tfopen_s(&fp, fname, _T("w"));
	if (fp != NULL) {
		_ftprintf_s(fp, _T("%s\n"), m_szKaisyaName);
		_ftprintf_s(fp, _T("%lf %lf\n"), m_dBackMMX, m_dBackMMY);
		_ftprintf_s(fp, _T("%d\n"), ncntrkind);
		_ftprintf_s(fp, _T("%s\n"), sportname);
		_ftprintf_s(fp, _T("%s %d %lf %lf %lf %lf %lf\n"),
			splotername, npcmdtype,
			dpxsize, dpysize, dpstep,
			dpsx, dpsy);
		_ftprintf_s(fp, _T("%d %d %d %d %d\n"),
			nparcflag, npfillflag,
			nphomemode, nplinemode, npomitmode);
		_ftprintf_s(fp, _T("%lf\n"), dclrlebel);
		_ftprintf_s(fp, _T("%s\n"), fntpath);
		_ftprintf_s(fp, _T("%s\n"), datpath);
		_ftprintf_s(fp, _T("%s\n"), outpath);
		_ftprintf_s(fp, _T("%s\n"), kmnpath);
		_ftprintf_s(fp, _T("%s\n"), wakpath);
		_ftprintf_s(fp, _T("%s\n"), partpath);
		_ftprintf_s(fp, _T("%s\n"), tmppath);
		_ftprintf_s(fp, _T("%s\n"), btppath);
		fclose(fp);
	}
}

void CMainFrame::ScrnAddEnvSave()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	TCHAR	pltname[FNAMEMAX];
	int		cntrmoveflag;
	int		startmoveflag;
	DBL		startmovexmm, startmoveymm;
	DBL		plotlimitstep, plotlimitr;
	DBL		plotstartspace, plotendspace;
	int		nareadotsize;
	int		npointdotsize;

	senvgetcrtpltname(pltname);
	cntrmoveflag = scrngetcntrmoveflag();
	startmoveflag = scrngetstartmoveflag();
	scrngetstartmovemm(&startmovexmm, &startmoveymm);
	poutgetparaminit(&plotlimitstep, &plotlimitr, &plotstartspace, &plotendspace);
	senvgetareadotsize(&nareadotsize);
	senvgetpointdotsize(&npointdotsize);

	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\ses_sys2.env"), exepath);
	_tfopen_s(&fp, fname, _T("w"));
	if (fp != NULL) {
		_ftprintf_s(fp, _T("%s\n"), pltname);
		_ftprintf_s(fp, _T("%d\n"), cntrmoveflag);
		_ftprintf_s(fp, _T("%d\n"), startmoveflag);
		_ftprintf_s(fp, _T("%4.1lf %4.1lf\n"), startmovexmm, startmoveymm);
		_ftprintf_s(fp, _T("%d\n"), m_nTTEisuFlag);
		_ftprintf_s(fp, _T("%4.1lf %4.1lf %4.1lf %4.1lf\n"),
			plotlimitstep, plotlimitr, plotstartspace, plotendspace);
		_ftprintf_s(fp, _T("%d\n"), nareadotsize);
		_ftprintf_s(fp, _T("%d\n"), npointdotsize);
		fclose(fp);
	}
}

void CMainFrame::MojiEnvSave()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	TCHAR	fontname[QRECMAX];
	int		esseisu, arceisu;
	int		ftategaki, fspacekind;
	DBL		dmmfwidth, dmmfhight;
	DBL		dmmmojispace, dmmstrgspace;
	DBL		dmmstringlen;
	DBL		dmmstartx, dmmstarty;
	int		nconerkind, nstartkind;

	mojienvgetfontname(fontname);
	mojienvgetesseisuno(&esseisu);
	mojienvgetarceisuno(&arceisu);
	mojienvgettategakiflag(&ftategaki);
	mojienvgetspacekind(&fspacekind);
	senvgetconerkind(&nconerkind);
	mojienvgetstartkind(&nstartkind);
	mojienvgetsize(&dmmfwidth, &dmmfhight);
	mojienvgetspace(&dmmmojispace, &dmmstrgspace);
	mojienvgetstrlen(&dmmstringlen);
	mojienvgetstart(&dmmstartx, &dmmstarty);

	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\ses_strg.env"), exepath);
	_tfopen_s(&fp, fname, _T("w"));
	if (fp != NULL) {
		_ftprintf_s(fp, _T("%s\n"), fontname);
		_ftprintf_s(fp, _T("%d %d\n"), esseisu, arceisu);
		_ftprintf_s(fp, _T("%d %d\n"), ftategaki, fspacekind);
		_ftprintf_s(fp, _T("%lf %lf\n"), dmmfwidth, dmmfhight);
		_ftprintf_s(fp, _T("%lf %lf\n"), dmmmojispace, dmmstrgspace);
		_ftprintf_s(fp, _T("%lf\n"), dmmstringlen);
		_ftprintf_s(fp, _T("%lf %lf\n"), dmmstartx, dmmstarty);
		_ftprintf_s(fp, _T("%d %d\n"), nstartkind, nconerkind);
		fclose(fp);
	}
}

void CMainFrame::FiguEnvSave()
{
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	FILE	*fp;
	int		cntrkind, plgncount;

	figuenvgetcntrkind(&cntrkind);
	figuenvgetplgncount(&plgncount);

	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\ses_figu.env"), exepath);
	_tfopen_s(&fp, fname, _T("w"));
	if (fp != NULL) {
		_ftprintf_s(fp, _T("%d\n"), cntrkind);
		_ftprintf_s(fp, _T("%d\n"), plgncount);
		fclose(fp);
	}
}

void CMainFrame::FontEnvLoad()
{
	FILE	*fp;
	TCHAR	exepath[FNAMEMAX];
	TCHAR	fname[FNAMEMAX];
	char	buf[RECMAX];
	int		len;
	int		fonttype;
	char	sSFName[QRECMAX];
	char	sFFName[QRECMAX];
	TCHAR	tSFName[QRECMAX];
	TCHAR	tFFName[QRECMAX];
	int		idx, eisuno;

	mojienvflistinit();
	mojienvflistopen(_T("wb"));
	mojienvflistclose();
	m_nCount = 0;
	senvgetexepath(exepath);
	_stprintf_s(fname, _T("%s\\fontname.env"), exepath);
	_tfopen_s(&fp, fname, _T("r"));
	if (fp != NULL) {
		while (1) {
			if (fgets(buf, RECMAX, fp) == NULL) {
				break;
			}
			len = strlen(buf);
			buf[len - 1] = '\0';
			sscanf_s(buf, "%d %s", &fonttype, sSFName, QRECMAX);
			strcpy_s(sFFName, QRECMAX, &(buf[30]));
			baselibCharStrToTCHARStr(sSFName, tSFName, QRECMAX);
			baselibCharStrToTCHARStr(sFFName, tFFName, QRECMAX);
			mojienvflistopen(_T("r+b"));
			mojienvsetflist(fonttype, tSFName, tFFName);
			mojienvflistclose();
			m_nCount++;
		}
		fclose(fp);
	}
	mojienvgetesseisuno(&eisuno);
	if (eisuno != -1) {
		fonttype = ES0FONT;
		sprintf_s(sSFName, QRECMAX, "ＥＳ英数no%02d", eisuno);
		sprintf_s(sFFName, QRECMAX, "Ｅ英数%02d", eisuno);
		baselibCharStrToTCHARStr(sSFName, tSFName, QRECMAX);
		baselibCharStrToTCHARStr(sFFName, tFFName, QRECMAX);
		mojienvflistopen(_T("r+b"));
		mojienvsetflist(fonttype, tSFName, tFFName);
		mojienvflistclose();
		m_nCount++;
	}
	mojienvgetarceisuno(&eisuno);
	if (eisuno != -1) {
		fonttype = ES0FONT;
		sprintf_s(sSFName, QRECMAX, "ＡＲ英数%04d", eisuno);
		sprintf_s(sFFName, QRECMAX, "Ａ英数%04d", eisuno);
		baselibCharStrToTCHARStr(sSFName, tSFName, QRECMAX);
		baselibCharStrToTCHARStr(sFFName, tFFName, QRECMAX);
		mojienvflistopen(_T("r+b"));
		mojienvsetflist(fonttype, tSFName, tFFName);
		mojienvflistclose();
		m_nCount++;
	}
	TrueTypeFontListSet();
}

void CMainFrame::TrueTypeFontListSet()
{
	CTonApp*	theApp;
	CString 	str;
	LOGFONT		lf;
	HDC			hDC;

	memset(&lf, 0, sizeof(LOGFONT));
	theApp = (CTonApp*)AfxGetApp();
	hDC = theApp->m_dcScreen.m_hDC;

	ASSERT(hDC != NULL);
	lf.lfCharSet = DEFAULT_CHARSET;
	lf.lfFaceName[0] = _T('\0');
	::EnumFontFamiliesEx(hDC, &lf,
		(FONTENUMPROC)EnumFamTategakiCallBackEx, NULL, NULL);
	::EnumFontFamiliesEx(hDC, &lf,
		(FONTENUMPROC)EnumFamOpenTypeCallBackEx, NULL, NULL);

}
BOOL CALLBACK AFX_EXPORT CMainFrame::EnumFamTategakiCallBackEx(ENUMLOGFONTEX* lpnlf,
	NEWTEXTMETRICEX* lpntm, int nFontType, LPVOID lpAdrs)
{
	int			fonttype;
	LPTSTR		lpTFName;
	int			len;
	TCHAR		tSFName[QRECMAX];

	if (RASTER_FONTTYPE < nFontType && lpnlf->elfFullName[0] == '@') {
		mojienvflistopen(_T("r+b"));
		fonttype = TT1FONT;
		lpTFName = (LPTSTR)(&(lpnlf->elfFullName[1]));
		len = _tcslen(lpTFName) + 1;
		_tcscpy_s(tSFName, len, lpTFName);
		baselibSpaceDelete(tSFName);
		mojienvsetflist(fonttype, tSFName, lpTFName);
		mojienvflistclose();
		m_nCount++;
	}
	return(TRUE);
}
BOOL CALLBACK AFX_EXPORT CMainFrame::EnumFamOpenTypeCallBackEx(ENUMLOGFONTEX* lpnlf,
	NEWTEXTMETRICEX* /*lpntm*/, int nFontType, LPVOID lpAdrs)
{
	int			fonttype;
	LPTSTR		lpTFName;
	int			len;
	TCHAR		tSFName[QRECMAX];

	if (RASTER_FONTTYPE < nFontType  && lpnlf->elfFullName[0] != '@') {
		mojienvflistopen(_T("r+b"));
		fonttype = TT2FONT;
		lpTFName = (LPTSTR)(lpnlf->elfFullName);
		len = _tcslen(lpTFName) + 1;
		_tcscpy_s(tSFName, len, lpTFName);
		baselibSpaceDelete(tSFName);
		mojienvsetflist(fonttype, tSFName, lpTFName);
		mojienvflistclose();
		m_nCount++;
	}
	return(TRUE);
}
BOOL CALLBACK AFX_EXPORT CMainFrame::EnumFamAsciiCallBackEx(ENUMLOGFONTEX* lpnlf,
	NEWTEXTMETRICEX* /*lpntm*/, int nFontType, LPVOID lpAdrs)
{
	int			fonttype;
	LPTSTR		lpTFName;
	int			len;
	TCHAR		tSFName[QRECMAX];

	if (RASTER_FONTTYPE < nFontType && lpnlf->elfFullName[0] != '@') {
		if (lpnlf->elfLogFont.lfCharSet == ANSI_CHARSET) {
			mojienvflistopen(_T("r+b"));
			fonttype = TT3FONT;
			lpTFName = (LPTSTR)(lpnlf->elfFullName);
			len = _tcslen(lpTFName) + 1;
			_tcscpy_s(tSFName, len, lpTFName);
			baselibSpaceDelete(tSFName);
			mojienvsetflist(fonttype, tSFName, lpTFName);
			mojienvflistclose();
			m_nCount++;
		}
	}
	return(TRUE);
}
CTonView* CMainFrame::GetCrtView()
{
	return(m_pcCrtView);
}
int CMainFrame::CheckProtectFile()
{
	TCHAR	fname[FNAMEMAX];
	TCHAR	szWinDir[FNAMEMAX];
	FILE	*fp;


	::GetSystemDirectory(szWinDir, FNAMEMAX);
	_stprintf_s(fname, _T("%s\\winsleep.sys"), szWinDir);
	_tfopen_s(&fp, fname, _T("r"));
	if (fp == NULL) {
		_stprintf_s(fname, _T("%s\\winsleep.drv"), szWinDir);
		_tfopen_s(&fp, fname, _T("r"));
		if (fp == NULL) {
			return -1;
		}
	}
	fclose(fp);
	return(0);
}

int CMainFrame::CheckProtectUsb()
{
	return(0);
	/*
	long	nID, nRet;
	HMODULE		hModule;
	LPUSBPRTCHK	fncUsbPrtCheck;

	hModule = LoadLibrary(_T("UsbPrt.dll"));
	if (hModule == 0) {
		return(-1);
	}
	fncUsbPrtCheck = (LPUSBPRTCHK)GetProcAddress(hModule, _T("Check");
	nID = 0x05;
	nRet = fncUsbPrtCheck(nID);
	FreeLibrary(hModule);
	if (nRet == nID) {
		return(0);
	}
	else {
		return(-1);
	}
	*/
}
void CMainFrame::SetSWakLocate()
{

}

